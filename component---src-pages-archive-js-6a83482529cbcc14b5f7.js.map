{"version":3,"sources":["webpack:///./src/pages/archive.js","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["pageQuery","ArchivePage","_ref","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","title","keywords","className","_components_sidebar_Sidebar__WEBPACK_IMPORTED_MODULE_7__","map","post","tags","node","frontmatter","key","id","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","fields","slug","date","excerpt","techTags","forEach","tag","i","label","push","_components_tags_TechTag__WEBPACK_IMPORTED_MODULE_8__","tech","name","size","color","getTechTags","dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e"],"mappings":"iOAoEaA,EAAS,aAwCPC,UAlGK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACfC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAASJ,EAAKK,KAAKC,aAAaF,OAgBtC,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,UAAUC,SAAU,qEAC/BN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBACbP,EAAAC,EAAAC,cAACM,EAAA,EAAD,OAEFR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBACbP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,gBAAd,aACCb,EAAMe,IAAI,SAACC,GACV,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,OACEX,EAAAC,EAAAC,cAAA,OAAKY,IAAKJ,EAAKE,KAAKG,GAAIR,UAAU,kBAChCP,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,GAAIP,EAAKE,KAAKM,OAAOC,KACrBZ,UAAU,aAEVP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,SAASG,EAAKE,KAAKC,YAAYR,QAE/CL,EAAAC,EAAAC,cAAA,SAAOK,UAAU,qBAAoBP,EAAAC,EAAAC,cAAA,sBAAcQ,EAAKE,KAAKC,YAAYO,OAEzEpB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,iBAAiBG,EAAKE,KAAKS,SACxCrB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,GAAIP,EAAKE,KAAKM,OAAOC,KACrBZ,UAAU,gBAEVP,EAAAC,EAAAC,cAAA,SAAOK,UAAU,uBAAjB,oBAEFP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WA1CT,SAACI,GACnB,IAAMW,EAAW,GASjB,OARAX,EAAKY,QAAQ,SAACC,EAAKC,GACjB5B,EAAO0B,QAAQ,SAACG,GACVF,IAAQE,EAAMF,KAChBF,EAASK,KAAK3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAASd,IAAKW,EAAGD,IAAKE,EAAMF,IAAKK,KAAMH,EAAMG,KAAMC,KAAMJ,EAAMI,KAAMC,KAAML,EAAMK,KACxEC,MAAON,EAAMM,aAInCV,EAiCQW,CAAYtB,gCCzD/B,IAAAuB,EAASC,EAAQ,IAAcC,EAC/BC,EAAAC,SAAAC,UACAC,EAAA,wBACA,SAGAH,GAAkBF,EAAQ,KAAgBD,EAAAG,EAH1C,OAG0C,CAC1CI,cAAA,EACAC,IAAA,WACA,IACA,UAAAC,MAAAC,MAAAJ,GAAA,GACK,MAAAK,GACL","file":"component---src-pages-archive-js-6a83482529cbcc14b5f7.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst ArchivePage = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges\n  const labels = data.site.siteMetadata.labels\n\n  const getTechTags = (tags) => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size}\n                                 color={label.color}/>)\n        }\n      })\n    })\n    return techTags\n  }\n\n\n  return (\n    <Layout>\n      <SEO title=\"Archive\" keywords={[`gatsby`, `javascript`, `react`, `web development`, `blog`, `graphql`]}/>\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar/>\n        </div>\n        <div className=\"post-list-main\">\n          <h2 className=\"heading mt-3\">All Posts</h2>\n          {posts.map((post) => {\n            const tags = post.node.frontmatter.tags\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link\n                  to={post.node.fields.slug}\n                  className=\"text-dark\"\n                >\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\"><i>Posted on {post.node.frontmatter.date}</i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link\n                  to={post.node.fields.slug}\n                  className=\"text-primary\"\n                >\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">\n                  {getTechTags(tags)}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n    query ArchiveQuery {\n        site {\n            siteMetadata {\n                title\n                author\n                labels {\n                    tag\n                    tech\n                    name\n                    size\n                    color\n                }\n            }\n        }\n        allMarkdownRemark(\n            limit: 1000\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { published: { eq: true } } }\n        ) {\n            totalCount\n            edges {\n                node {\n                    excerpt(pruneLength: 200)\n                    html\n                    id\n                    frontmatter {\n                        title\n                        date(formatString: \"MMMM DD, YYYY\")\n                        tags\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default ArchivePage\n\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}