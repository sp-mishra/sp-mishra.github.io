{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["pageQuery","Tag","pageContext","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","console","log","tag","totalCount","tagHeader","title","keywords","className","map","post","tags","node","frontmatter","key","id","to","fields","slug","date","excerpt","techTags","forEach","i","label","push","tech","name","size","color","getTechTags"],"mappings":"yRA+FaA,EAAS,aAwCPC,UA5HH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACpBC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAASJ,EAAKK,KAAKC,aAAaF,OACtCG,QAAQC,IAAIT,EAAYU,KAHa,IAI7BA,EAAQV,EAARU,IACAC,EAAeV,EAAKE,kBAApBQ,WACFC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEED,EAFF,IAiBf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAM,OAAOC,SAAU,CAAC,SAAD,8DAC5B,yBAAKC,UAAU,cACb,yBAAKA,UAAU,qBACb,kBAAC,IAAD,OAGF,yBAAKA,UAAU,kBACb,2BAAG,wBAAIA,UAAU,WAAWH,IAC3BV,EAAMc,KAAI,SAACC,GACV,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,OACE,yBAAKG,IAAKJ,EAAKE,KAAKG,GAAIP,UAAU,kBAChC,kBAAC,OAAD,CACEQ,GAAIN,EAAKE,KAAKK,OAAOC,KACrBV,UAAU,aAEV,wBAAIA,UAAU,WAAWE,EAAKE,KAAKC,YAAYP,QAEjD,2BAAOE,UAAU,qBAAjB,aAAgDE,EAAKE,KAAKC,YAAYM,MAEtE,uBAAGX,UAAU,iBAAiBE,EAAKE,KAAKQ,SACxC,kBAAC,OAAD,CACEJ,GAAIN,EAAKE,KAAKK,OAAOC,KACrBV,UAAU,gBAEV,2BAAOA,UAAU,uBAAjB,oBAEF,yBAAKA,UAAU,WA1CT,SAACG,GACnB,IAAMU,EAAW,GASjB,OARAV,EAAKW,SAAQ,SAACnB,EAAKoB,GACjBzB,EAAOwB,SAAQ,SAACE,GACVrB,IAAQqB,EAAMrB,KAChBkB,EAASI,KAAK,kBAAC,IAAD,CAASX,IAAKS,EAAGpB,IAAKqB,EAAMrB,IAAKuB,KAAMF,EAAME,KAAMC,KAAMH,EAAMG,KAAMC,KAAMJ,EAAMI,KACxEC,MAAOL,EAAMK,eAInCR,EAiCQS,CAAYnB","file":"component---src-templates-tag-js-d840460592e1bcdab4f4.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst Tag = ({ pageContext, data }) => {\n  const posts = data.allMarkdownRemark.edges\n  const labels = data.site.siteMetadata.labels\n  console.log(pageContext.tag)\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  const getTechTags = (tags) => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size}\n                                 color={label.color}/>)\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" keywords={[`gatsby`, `javascript`, `react`, `web development`, `node.js`, `graphql`]}/>\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar/>\n        </div>\n\n        <div className=\"post-list-main\">\n          <i><h2 className=\"heading\">{tagHeader}</h2></i>\n          {posts.map((post) => {\n            const tags = post.node.frontmatter.tags\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link\n                  to={post.node.fields.slug}\n                  className=\"text-dark\"\n                >\n                  <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">Posted on {post.node.frontmatter.date}\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link\n                  to={post.node.fields.slug}\n                  className=\"text-primary\"\n                >\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">\n                  {getTechTags(tags)}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }),\n}\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        site {\n            siteMetadata {\n                title\n                author\n                labels {\n                    tag\n                    tech\n                    name\n                    size\n                    color\n                }\n            }\n        }\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { tags: { in: [$tag] } } }\n        ) {\n            totalCount\n            edges {\n                node {\n                    excerpt(pruneLength: 200)\n                    html\n                    id\n                    frontmatter {\n                        title\n                        date(formatString: \"MMMM, YYYY\")\n                        tags\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default Tag"],"sourceRoot":""}