{"componentChunkName":"component---src-templates-post-list-js","path":"/2","result":{"data":{"site":{"siteMetadata":{"title":"BrainlessLabs Diary","author":"BrainlessLabs","labels":[{"tag":"react","tech":"React","name":"M12 9.861A2.139 2.139 0 1 0 12 14.139 2.139 2.139 0 1 0 12 9.861zM6.008 16.255l-.472-.12C2.018 15.246 0 13.737 0 11.996s2.018-3.25 5.536-4.139l.472-.119.133.468a23.53 23.53 0 0 0 1.363 3.578l.101.213-.101.213a23.307 23.307 0 0 0-1.363 3.578l-.133.467zM5.317 8.95c-2.674.751-4.315 1.9-4.315 3.046 0 1.145 1.641 2.294 4.315 3.046a24.95 24.95 0 0 1 1.182-3.046A24.752 24.752 0 0 1 5.317 8.95zM17.992 16.255l-.133-.469a23.357 23.357 0 0 0-1.364-3.577l-.101-.213.101-.213a23.42 23.42 0 0 0 1.364-3.578l.133-.468.473.119c3.517.889 5.535 2.398 5.535 4.14s-2.018 3.25-5.535 4.139l-.473.12zm-.491-4.259c.48 1.039.877 2.06 1.182 3.046 2.675-.752 4.315-1.901 4.315-3.046 0-1.146-1.641-2.294-4.315-3.046a24.788 24.788 0 0 1-1.182 3.046zM5.31 8.945l-.133-.467C4.188 4.992 4.488 2.494 6 1.622c1.483-.856 3.864.155 6.359 2.716l.34.349-.34.349a23.552 23.552 0 0 0-2.422 2.967l-.135.193-.235.02a23.657 23.657 0 0 0-3.785.61l-.472.119zm1.896-6.63c-.268 0-.505.058-.705.173-.994.573-1.17 2.565-.485 5.253a25.122 25.122 0 0 1 3.233-.501 24.847 24.847 0 0 1 2.052-2.544c-1.56-1.519-3.037-2.381-4.095-2.381zM16.795 22.677c-.001 0-.001 0 0 0-1.425 0-3.255-1.073-5.154-3.023l-.34-.349.34-.349a23.53 23.53 0 0 0 2.421-2.968l.135-.193.234-.02a23.63 23.63 0 0 0 3.787-.609l.472-.119.134.468c.987 3.484.688 5.983-.824 6.854a2.38 2.38 0 0 1-1.205.308zm-4.096-3.381c1.56 1.519 3.037 2.381 4.095 2.381h.001c.267 0 .505-.058.704-.173.994-.573 1.171-2.566.485-5.254a25.02 25.02 0 0 1-3.234.501 24.674 24.674 0 0 1-2.051 2.545zM18.69 8.945l-.472-.119a23.479 23.479 0 0 0-3.787-.61l-.234-.02-.135-.193a23.414 23.414 0 0 0-2.421-2.967l-.34-.349.34-.349C14.135 1.778 16.515.767 18 1.622c1.512.872 1.812 3.37.824 6.855l-.134.468zM14.75 7.24c1.142.104 2.227.273 3.234.501.686-2.688.509-4.68-.485-5.253-.988-.571-2.845.304-4.8 2.208A24.849 24.849 0 0 1 14.75 7.24zM7.206 22.677A2.38 2.38 0 0 1 6 22.369c-1.512-.871-1.812-3.369-.823-6.854l.132-.468.472.119c1.155.291 2.429.496 3.785.609l.235.02.134.193a23.596 23.596 0 0 0 2.422 2.968l.34.349-.34.349c-1.898 1.95-3.728 3.023-5.151 3.023zm-1.19-6.427c-.686 2.688-.509 4.681.485 5.254.987.563 2.843-.305 4.8-2.208a24.998 24.998 0 0 1-2.052-2.545 24.976 24.976 0 0 1-3.233-.501zM12 16.878c-.823 0-1.669-.036-2.516-.106l-.235-.02-.135-.193a30.388 30.388 0 0 1-1.35-2.122 30.354 30.354 0 0 1-1.166-2.228l-.1-.213.1-.213a30.3 30.3 0 0 1 1.166-2.228c.414-.716.869-1.43 1.35-2.122l.135-.193.235-.02a29.785 29.785 0 0 1 5.033 0l.234.02.134.193a30.006 30.006 0 0 1 2.517 4.35l.101.213-.101.213a29.6 29.6 0 0 1-2.517 4.35l-.134.193-.234.02c-.847.07-1.694.106-2.517.106zm-2.197-1.084c1.48.111 2.914.111 4.395 0a29.006 29.006 0 0 0 2.196-3.798 28.585 28.585 0 0 0-2.197-3.798 29.031 29.031 0 0 0-4.394 0 28.477 28.477 0 0 0-2.197 3.798 29.114 29.114 0 0 0 2.197 3.798z","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"M11.177 25.3a1.94 1.94 0 0 1-.969-.259l-3.086-1.826c-.46-.257-.235-.349-.083-.402.614-.213.739-.262 1.394-.635.069-.038.159-.024.231.018l2.37 1.407a.304.304 0 0 0 .287 0l9.241-5.333a.292.292 0 0 0 .141-.25V7.355a.3.3 0 0 0-.143-.255l-9.237-5.329a.29.29 0 0 0-.285 0L1.803 7.102a.296.296 0 0 0-.146.253v10.666c0 .102.056.198.145.247l2.532 1.462c1.374.687 2.215-.122 2.215-.935V8.265c0-.149.12-.266.269-.266H7.99c.146 0 .267.117.267.266v10.53c0 1.833-.998 2.885-2.736 2.885-.534 0-.955 0-2.129-.579L.969 19.706A1.953 1.953 0 0 1 0 18.02V7.355c0-.693.371-1.339.969-1.684l9.242-5.34a2.023 2.023 0 0 1 1.942 0l9.241 5.34c.599.346.971.992.971 1.684V18.02c0 .693-.372 1.337-.971 1.686l-9.241 5.335a1.942 1.942 0 0 1-.973.259zm2.855-7.348c-4.045 0-4.892-1.857-4.892-3.414 0-.148.118-.266.266-.266h1.195c.133 0 .245.096.265.226.18 1.216.717 1.831 3.164 1.831 1.946 0 2.775-.441 2.775-1.473 0-.596-.234-1.037-3.26-1.334-2.528-.25-4.093-.809-4.093-2.831 0-1.865 1.572-2.977 4.207-2.977 2.961 0 4.425 1.027 4.611 3.233a.27.27 0 0 1-.267.291h-1.2a.266.266 0 0 1-.259-.209c-.288-1.28-.988-1.689-2.886-1.689-2.126 0-2.373.74-2.373 1.295 0 .673.292.869 3.161 1.248 2.84.375 4.19.907 4.19 2.902 0 2.014-1.678 3.167-4.606 3.167z","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"M23.546 10.93L13.067.452c-.604-.603-1.582-.603-2.188 0L8.708 2.627l2.76 2.76c.645-.215 1.379-.07 1.889.441.516.515.658 1.258.438 1.9l2.658 2.66c.645-.223 1.387-.078 1.9.435.721.72.721 1.884 0 2.604-.719.719-1.881.719-2.6 0-.539-.541-.674-1.337-.404-1.996L12.86 8.955v6.525c.176.086.342.203.488.348.713.721.713 1.883 0 2.6-.719.721-1.889.721-2.609 0-.719-.719-.719-1.879 0-2.598.182-.18.387-.316.605-.406V8.835c-.217-.091-.424-.222-.6-.401-.545-.545-.676-1.342-.396-2.009L7.636 3.7.45 10.881c-.6.605-.6 1.584 0 2.189l10.48 10.477c.604.604 1.582.604 2.186 0l10.43-10.43c.605-.603.605-1.582 0-2.187","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"M0 0h24v24H0V0zm22.034 18.276c-.175-1.095-.888-2.015-3.003-2.873-.736-.345-1.554-.585-1.797-1.14-.091-.33-.105-.51-.046-.705.15-.646.915-.84 1.515-.66.39.12.75.42.976.9 1.034-.676 1.034-.676 1.755-1.125-.27-.42-.404-.601-.586-.78-.63-.705-1.469-1.065-2.834-1.034l-.705.089c-.676.165-1.32.525-1.71 1.005-1.14 1.291-.811 3.541.569 4.471 1.365 1.02 3.361 1.244 3.616 2.205.24 1.17-.87 1.545-1.966 1.41-.811-.18-1.26-.586-1.755-1.336l-1.83 1.051c.21.48.45.689.81 1.109 1.74 1.756 6.09 1.666 6.871-1.004.029-.09.24-.705.074-1.65l.046.067zm-8.983-7.245h-2.248c0 1.938-.009 3.864-.009 5.805 0 1.232.063 2.363-.138 2.711-.33.689-1.18.601-1.566.48-.396-.196-.597-.466-.83-.855-.063-.105-.11-.196-.127-.196l-1.825 1.125c.305.63.75 1.172 1.324 1.517.855.51 2.004.675 3.207.405.783-.226 1.458-.691 1.811-1.411.51-.93.402-2.07.397-3.346.012-2.054 0-4.109 0-6.179l.004-.056z","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"M1.5 0h21l-1.91 21.563L11.977 24l-8.565-2.438L1.5 0zm17.09 4.413L5.41 4.41l.213 2.622 10.125.002-.255 2.716h-6.64l.24 2.573h6.182l-.366 3.523-2.91.804-2.956-.81-.188-2.11h-2.61l.29 3.855L12 19.288l5.373-1.53L18.59 4.414z","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"M14.31.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.83l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.23l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05L0 11.97l.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.24l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05 1.07.13zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09-.33.22zM21.1 6.11l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01.21.03zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08-.33.23z","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"M20.156.083c3.033.525 3.893 2.598 3.829 4.77L24 4.822 22.635 22.71 4.89 23.926h.016C3.433 23.864.15 23.729 0 19.139l1.645-3 2.819 6.586.503 1.172 2.805-9.144-.03.007.016-.03 9.255 2.956-1.396-5.431-.99-3.9 8.82-.569-.615-.51L16.5 2.114 20.159.073l-.003.01zM0 19.089v.026-.029.003zM5.13 5.073c3.561-3.533 8.157-5.621 9.922-3.84 1.762 1.777-.105 6.105-3.673 9.636-3.563 3.532-8.103 5.734-9.864 3.957-1.766-1.777.045-6.217 3.612-9.75l.003-.003z","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"M8.851 18.56s-.917.534.653.714c1.902.218 2.874.187 4.969-.211 0 0 .552.346 1.321.646-4.699 2.013-10.633-.118-6.943-1.149M8.276 15.933s-1.028.761.542.924c2.032.209 3.636.227 6.413-.308 0 0 .384.389.987.602-5.679 1.661-12.007.13-7.942-1.218M13.116 11.475c1.158 1.333-.304 2.533-.304 2.533s2.939-1.518 1.589-3.418c-1.261-1.772-2.228-2.652 3.007-5.688 0-.001-8.216 2.051-4.292 6.573M19.33 20.504s.679.559-.747.991c-2.712.822-11.288 1.069-13.669.033-.856-.373.75-.89 1.254-.998.527-.114.828-.093.828-.093-.953-.671-6.156 1.317-2.643 1.887 9.58 1.553 17.462-.7 14.977-1.82M9.292 13.21s-4.362 1.036-1.544 1.412c1.189.159 3.561.123 5.77-.062 1.806-.152 3.618-.477 3.618-.477s-.637.272-1.098.587c-4.429 1.165-12.986.623-10.522-.568 2.082-1.006 3.776-.892 3.776-.892M17.116 17.584c4.503-2.34 2.421-4.589.968-4.285-.355.074-.515.138-.515.138s.132-.207.385-.297c2.875-1.011 5.086 2.981-.928 4.562 0-.001.07-.062.09-.118M14.401 0s2.494 2.494-2.365 6.33c-3.896 3.077-.888 4.832-.001 6.836-2.274-2.053-3.943-3.858-2.824-5.539 1.644-2.469 6.197-3.665 5.19-7.627M9.734 23.924c4.322.277 10.959-.153 11.116-2.198 0 0-.302.775-3.572 1.391-3.688.694-8.239.613-10.937.168 0-.001.553.457 3.393.639","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"M9.93 12.645h4.134L11.996 7.74M11.996.009L.686 3.988l1.725 14.76 9.585 5.243 9.588-5.238L23.308 3.99 11.996.01zm7.058 18.297h-2.636l-1.42-3.501H8.995l-1.42 3.501H4.937l7.06-15.648 7.057 15.648z","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"M1.5 0h21l-1.91 21.563L11.977 24l-8.564-2.438L1.5 0zm7.031 9.75l-.232-2.718 10.059.003.23-2.622L5.412 4.41l.698 8.01h9.126l-.326 3.426-2.91.804-2.955-.81-.188-2.11H6.248l.33 4.171L12 19.351l5.379-1.443.744-8.157H8.531z","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"M7.01 10.207h-.944l-.515 2.648h.838c.556 0 .97-.105 1.242-.314.272-.21.455-.559.55-1.049.092-.47.05-.802-.124-.995-.175-.193-.523-.29-1.047-.29zM12 5.688C5.373 5.688 0 8.514 0 12s5.373 6.313 12 6.313S24 15.486 24 12c0-3.486-5.373-6.312-12-6.312zm-3.26 7.451c-.261.25-.575.438-.917.551-.336.108-.765.164-1.285.164H5.357l-.327 1.681H3.652l1.23-6.326h2.65c.797 0 1.378.209 1.744.628.366.418.476 1.002.33 1.752a2.836 2.836 0 0 1-.305.847c-.143.255-.33.49-.561.703zm4.024.715l.543-2.799c.063-.318.039-.536-.068-.651-.107-.116-.336-.174-.687-.174H11.46l-.704 3.625H9.388l1.23-6.327h1.367l-.327 1.682h1.218c.767 0 1.295.134 1.586.401s.378.7.263 1.299l-.572 2.944h-1.389zm7.597-2.265a2.782 2.782 0 0 1-.305.847c-.143.255-.33.49-.561.703a2.44 2.44 0 0 1-.917.551c-.336.108-.765.164-1.286.164h-1.18l-.327 1.682h-1.378l1.23-6.326h2.649c.797 0 1.378.209 1.744.628.366.417.477 1.001.331 1.751zM17.766 10.207h-.943l-.516 2.648h.838c.557 0 .971-.105 1.242-.314.272-.21.455-.559.551-1.049.092-.47.049-.802-.125-.995s-.524-.29-1.047-.29z","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"M17.18 9.518c-1.263-5.56-4.242-7.387-4.562-8.086C12.266.939 11.885 0 11.885 0c-.002.019-.004.031-.005.049v.013h-.001c-.002.015-.003.025-.004.039v.015h-.002c0 .01-.002.018-.002.026v.026h-.003c-.001.008-.001.018-.003.025v.021h-.002c0 .007 0 .015-.002.021v.02h-.002c0 .01-.001.022-.002.032v.002c-.003.017-.006.034-.009.05v.008h-.002c-.001.004-.003.008-.003.012v.017h-.003v.022h-.005v.018h-.005v.021h-.004v.019h-.004v.017h-.006v.014h-.004v.018h-.004v.014h-.005v.013H11.8v.015h-.004c-.001.001-.001.003-.001.004v.01h-.003c-.001.002-.001.004-.001.006v.006h-.002c-.001.003-.002.008-.002.01-.003.007-.007.014-.01.021v.002c-.002.002-.004.005-.005.007v.008h-.004v.008h-.005v.008h-.003v.01h-.006v.014h-.004v.004h-.004v.008h-.004v.011h-.004v.008h-.006v.011h-.004v.008h-.005v.008h-.003v.01h-.005v.008h-.004v.006h-.004v.008h-.006V.76h-.004v.006h-.005v.008h-.004v.011h-.005v.004h-.003v.008h-.006v.004h-.004v.01h-.004v.004h-.004v.008h-.005v.006h-.003l-.002.004v.004h-.002c-.001.002-.002.002-.002.004v.001h-.001c-.001.003-.002.005-.004.007v.003h-.001c-.005.006-.008.012-.012.018v.001c-.002.002-.007.006-.009.01v.002h-.001c-.001.001-.003.002-.003.003v.003h-.002l-.003.003v.001h-.001c0 .001-.002.002-.003.004v.004h-.003l-.002.002v.002h-.002c0 .002-.002.002-.002.003v.003h-.004c0 .001-.001.002-.002.003V.92h-.003v.004h-.004V.93h-.004v.008h-.005V.93h-.005v.004h-.004V.94h-.005v.008h-.005v.004h-.004v.006h-.004v.004h-.004V.97h-.006v.004h-.004V.98h-.005v.004h-.004v.005h-.005v.01h-.002v.004h-.006v.005h-.004v.002h-.004v.004h-.005v.01h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.005v.004h-.004v.004h-.004v.01h-.004v.005h-.006v.004h-.004v.004h-.005v.006h-.004v.004h-.005v.007h-.004v.004h-.006V1.1h-.002v.004h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.003c-.001.001-.001.002-.001.002v.002h-.002l-.004.004s-.002.002-.004.003v.006h-.004v.005h-.004v.004h-.004v.004h-.003l-.003.003v.003h-.002l-.002.002v.003h-.002c-.005.006-.007.01-.014.016-.002.002-.008.007-.012.01-.012.008-.027.021-.039.032-.008.005-.016.012-.022.017v.001h-.001c-.016.013-.031.025-.049.039v.001c-.024.02-.047.039-.074.062V1.34h-.002c-.057.047-.117.1-.186.159V1.5h-.001c-.169.148-.37.338-.595.568l-.015.015-.004.004C9 3.494 6.857 6.426 6.631 11.164c-.02.392-.016.773.006 1.144v.009c.109 1.867.695 3.461 1.428 4.756v.001c.292.516.607.985.926 1.405v.001c1.102 1.455 2.227 2.317 2.514 2.526.441 1.023.4 2.779.4 2.779l.644.215s-.131-1.701.053-2.522c.057-.257.192-.476.349-.662.106-.075.42-.301.797-.645.018-.019.028-.036.044-.054 1.521-1.418 4.362-4.91 3.388-10.599z","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z","size":20,"color":"deepskyblue"},{"tag":"graphql","tech":"GraphQL","name":"M14.051 2.751l4.935 2.85c.816-.859 2.173-.893 3.032-.077.148.14.274.301.377.477.589 1.028.232 2.339-.796 2.928-.174.1-.361.175-.558.223v5.699c1.146.273 1.854 1.423 1.58 2.569-.048.204-.127.4-.232.581-.592 1.023-1.901 1.374-2.927.782-.196-.113-.375-.259-.526-.429l-4.905 2.832c.372 1.124-.238 2.335-1.361 2.706-.217.071-.442.108-.67.108-1.181.001-2.139-.955-2.14-2.136 0-.205.029-.41.088-.609l-4.936-2.847c-.816.854-2.171.887-3.026.07-.854-.816-.886-2.171-.07-3.026.283-.297.646-.506 1.044-.603l.001-5.699c-1.15-.276-1.858-1.433-1.581-2.584.047-.198.123-.389.224-.566.592-1.024 1.902-1.374 2.927-.782.177.101.339.228.48.377l4.938-2.85C9.613 1.612 10.26.423 11.39.088 11.587.029 11.794 0 12 0c1.181-.001 2.139.954 2.14 2.134.001.209-.03.418-.089.617zm-.515.877c-.019.021-.037.039-.058.058l6.461 11.19c.026-.009.056-.016.082-.023V9.146c-1.145-.283-1.842-1.442-1.558-2.588.006-.024.012-.049.019-.072l-4.946-2.858zm-3.015.059l-.06-.06-4.946 2.852c.327 1.135-.327 2.318-1.461 2.645-.026.008-.051.014-.076.021v5.708l.084.023 6.461-11.19-.002.001zm2.076.507c-.39.112-.803.112-1.192 0l-6.46 11.189c.294.283.502.645.6 1.041h12.911c.097-.398.307-.761.603-1.044L12.597 4.194zm.986 16.227l4.913-2.838c-.015-.047-.027-.094-.038-.142H5.542l-.021.083 4.939 2.852c.388-.404.934-.653 1.54-.653.627 0 1.19.269 1.583.698z","size":20,"color":"hotpink"},{"tag":"gatsby","tech":"Gatsby","name":"M12.001.007C5.326.007.007 5.326.007 12S5.326 23.995 12 23.995s11.994-5.319 11.994-11.994S18.676.007 12.001.007zM2.614 12.105l9.283 9.283c-5.111 0-9.283-4.172-9.283-9.283zm11.473 9.074L2.823 9.915C3.76 5.743 7.516 2.614 12 2.614a9.476 9.476 0 0 1 7.614 3.86L18.259 7.62a7.657 7.657 0 0 0-6.362-3.337A7.555 7.555 0 0 0 4.7 9.393l9.804 9.805c2.4-.835 4.276-2.92 4.798-5.424h-4.068v-1.773h6.154c0 4.485-3.129 8.24-7.301 9.178z","size":20,"color":"rebeccapurple"},{"tag":"npm","tech":"NPM","name":"M4.145 23.996c.12-.463.23-.9.343-1.338.692-2.713 1.322-5.44 1.82-8.197.245-1.35.446-2.71.633-4.074.142-1.028.217-2.064.198-3.105-.01-.557-.034-1.116-.193-1.655-.07-.24-.174-.473-.3-.686-.165-.273-.43-.378-.75-.368-.883.026-1.633.363-2.272.96-.727.68-1.202 1.527-1.553 2.445-.166.435-.284.887-.422 1.33-.02.066-.026.123-.115.122C1.04 9.424.545 9.425.05 9.424c-.013 0-.024-.008-.036-.01 0-.193-.02-.385.003-.572.346-2.853 1.57-5.267 3.668-7.226C4.47.882 5.4.373 6.462.142 8.017-.196 9.258.4 9.996 1.822c.375.72.578 1.496.71 2.293.21 1.287.218 2.586.175 3.885-.014.42-.04.84-.062 1.26-.002.054 0 .108 0 .176.057.003.105.008.154.008.905 0 1.81-.002 2.717.005.124 0 .16-.047.18-.16.575-3.113 1.367-6.17 2.39-9.166.024-.074.05-.124.147-.124 1.12.004 2.24.004 3.362.004.017 0 .035.004.07.008l-.193.753C18.89 3.7 18.21 6.65 17.66 9.628c-.288 1.546-.533 3.1-.69 4.664-.086.875-.14 1.752-.113 2.63.016.53.054 1.062.22 1.57.064.202.16.4.273.58.167.26.426.366.74.356 1.16-.033 2.042-.59 2.746-1.47.707-.88 1.133-1.9 1.434-2.98.028-.1.06-.202.076-.306.014-.082.054-.104.13-.104.467.002.933.004 1.4 0 .102-.002.12.043.117.13-.014.804-.157 1.583-.39 2.347-.59 1.928-1.557 3.635-2.992 5.06-.813.81-1.762 1.407-2.88 1.706-.677.183-1.355.212-2.025-.028-.76-.27-1.276-.816-1.66-1.504-.402-.725-.613-1.512-.75-2.322-.24-1.406-.24-2.824-.172-4.242.042-.89.127-1.777.193-2.666.014-.19.016-.19-.174-.19-.855 0-1.71.002-2.566-.002-.104 0-.153.024-.17.137-.27 1.813-.637 3.608-1.074 5.387-.453 1.842-.974 3.664-1.587 5.46-.044.127-.104.16-.233.16-1.065-.006-2.13-.004-3.197-.004h-.17z","size":20,"color":"rebeccapurple"},{"tag":"redis","tech":"Redis","name":"M23.99414 14.34005c-.01.229-.313.485-.935.81-1.281.667-7.916 3.396-9.328 4.132-1.413.736-2.197.729-3.313.195-1.116-.533-8.176-3.386-9.448-3.993-.635-.304-.959-.56-.97-.802v2.426c0 .242.334.499.97.803 1.272.608 8.333 3.46 9.448 3.993 1.116.534 1.9.541 3.313-.196 1.412-.736 8.047-3.464 9.328-4.132.651-.339.939-.603.939-.842 0-.226.001-2.392.001-2.392-.001-.001-.004-.001-.005-.002zM23.99314 10.38505c-.011.229-.313.484-.934.809-1.281.667-7.916 3.396-9.328 4.132-1.413.736-2.197.729-3.313.196-1.116-.533-8.176-3.386-9.448-3.994-.635-.303-.959-.56-.97-.801v2.426c0 .242.334.498.97.802 1.272.608 8.332 3.46 9.448 3.993 1.116.534 1.9.541 3.313-.195 1.412-.736 8.047-3.465 9.328-4.132.651-.34.939-.604.939-.843 0-.226.001-2.392.001-2.392-.001-.001-.004 0-.006-.001zM23.99314 6.28305c.012-.244-.307-.458-.949-.694-1.248-.457-7.843-3.082-9.106-3.545-1.263-.462-1.777-.443-3.261.089-1.484.533-8.506 3.287-9.755 3.776-.625.246-.931.473-.92.715v2.426c0 .242.334.498.97.802 1.272.608 8.332 3.461 9.448 3.994 1.116.533 1.9.54 3.313-.196 1.412-.736 8.047-3.465 9.328-4.132.651-.34.939-.604.939-.843 0-.225.001-2.392.001-2.392h-.008zm-15.399 2.296l5.561-.854-1.68 2.463-3.881-1.609zm12.299-2.218l-3.288 1.299-.357.14-3.287-1.299 3.642-1.44 3.29 1.3zm-9.655-2.383l-.538-.992 1.678.656 1.582-.518-.428 1.025 1.612.604-2.079.216-.466 1.12-.752-1.249-2.401-.216 1.792-.646zm-4.143 1.399c1.642 0 2.972.516 2.972 1.152 0 .636-1.331 1.152-2.972 1.152s-2.973-.517-2.973-1.152c0-.636 1.331-1.152 2.973-1.152z","size":20,"color":"rebeccapurple"},{"tag":"cpp","tech":"C++","name":"M22.393 6c-.167-.29-.398-.543-.652-.69L12.925.22c-.508-.293-1.339-.293-1.847 0L2.26 5.31c-.508.293-.923 1.013-.923 1.6v10.18c0 .294.104.62.271.91.167.29.398.543.652.689l8.816 5.091c.508.293 1.339.293 1.847 0l8.816-5.091c.254-.146.485-.399.652-.689s.271-.616.271-.91V6.91c.002-.294-.102-.62-.269-.91zM12 19.109c-3.92 0-7.109-3.189-7.109-7.109S8.08 4.891 12 4.891a7.133 7.133 0 0 1 6.156 3.552l-3.076 1.781A3.567 3.567 0 0 0 12 8.445c-1.96 0-3.554 1.595-3.554 3.555S10.04 15.555 12 15.555a3.57 3.57 0 0 0 3.08-1.778l3.077 1.78A7.135 7.135 0 0 1 12 19.109zm7.109-6.714h-.79v.79h-.79v-.79h-.79v-.79h.79v-.79h.79v.79h.79v.79zm2.962 0h-.79v.79h-.79v-.79h-.789v-.79h.789v-.79h.79v.79h.79v.79z","size":20,"color":"rebeccapurple"},{"tag":"machinelearning","tech":"ML/AI","name":"M5.177,17.658c0,0,3.445,1.987,4.823,1.987c2.067,0,4.823-1.987,4.823-1.987c0.024-0.025,0.044-0.054,0.068-0.08H5.109C5.133,17.604,5.153,17.633,5.177,17.658z M8.622,1.583V0.531C6.496,0.973,2.539,2.521,1.376,7.933H0.699c-0.189,0-0.344,0.155-0.344,0.344v1.378C0.354,9.845,0.509,10,0.699,10h0.392c-0.016,0.224-0.026,0.454-0.033,0.689H0.699c-0.189,0-0.344,0.155-0.344,0.344v1.378c0,0.189,0.155,0.344,0.344,0.344h0.439c0.089,0.79,0.262,1.804,0.594,2.849v2.663H4.34c-2.233-2.449-2.264-6.822-2.264-7.01C2.077,4.052,6.353,2.108,8.622,1.583zM10.689,0.354H9.311v2.059h1.378V0.354z M11.378,2.63v0.472H8.622V2.63C6.612,3.147,3.11,4.951,3.11,11.258c0,0,0.004,3.373,1.47,5.632h4.042v-0.689h2.756v0.689h4.042c1.466-2.259,1.47-5.632,1.47-5.632C16.89,4.951,13.388,3.147,11.378,2.63z M5.005,12.035c-0.318-0.364-0.517-0.833-0.517-1.354S4.687,9.69,5.005,9.327V12.035zM6.383,10.026c-0.295,0.078-0.517,0.335-0.517,0.654c0,0.319,0.222,0.576,0.517,0.654v1.395c-0.384-0.032-0.738-0.163-1.033-0.377V9.008c0.296-0.214,0.649-0.345,1.033-0.377V10.026z M7.761,12.353c-0.296,0.214-0.649,0.345-1.033,0.377v-1.395C7.022,11.257,7.244,11,7.244,10.681c0-0.319-0.222-0.576-0.517-0.654V8.631c0.384,0.032,0.738,0.163,1.033,0.377V12.353zM8.105,12.035V9.327c0.318,0.363,0.517,0.833,0.517,1.354S8.423,11.671,8.105,12.035z M10,13.445l-1.378,0.689L10,12.756l1.378,1.378L10,13.445z M11.895,12.035c-0.318-0.364-0.517-0.833-0.517-1.354s0.199-0.991,0.517-1.354V12.035z M13.273,10.026c-0.295,0.078-0.517,0.335-0.517,0.654c0,0.319,0.222,0.576,0.517,0.654v1.395c-0.384-0.032-0.738-0.163-1.033-0.377V9.008c0.296-0.214,0.649-0.345,1.033-0.377V10.026z M14.651,12.353c-0.296,0.214-0.649,0.345-1.033,0.377v-1.395c0.295-0.078,0.517-0.335,0.517-0.654c0-0.319-0.222-0.576-0.517-0.654V8.631c0.384,0.032,0.738,0.163,1.033,0.377V12.353zM14.995,12.035V9.327c0.318,0.363,0.517,0.833,0.517,1.354S15.313,11.671,14.995,12.035z M19.646,9.656V8.278c0-0.189-0.155-0.344-0.344-0.344h-0.678c-1.163-5.413-5.12-6.96-7.246-7.402v1.052c2.269,0.525,6.545,2.469,6.545,9.675c0,0.188-0.031,4.561-2.264,7.01h2.608v-2.663c0.333-1.044,0.505-2.058,0.594-2.849h0.439c0.189,0,0.344-0.155,0.344-0.344v-1.378c0-0.189-0.155-0.344-0.344-0.344h-0.359c-0.007-0.235-0.017-0.465-0.033-0.689h0.392C19.491,10,19.646,9.845,19.646,9.656z","size":20,"color":"deepskyblue"},{"tag":"math","tech":"Math","name":"M11.709,7.438H8.292c-0.234,0-0.427,0.192-0.427,0.427v8.542c0,0.234,0.192,0.427,0.427,0.427h3.417c0.233,0,0.426-0.192,0.426-0.427V7.865C12.135,7.63,11.942,7.438,11.709,7.438 M11.282,15.979H8.719V8.292h2.563V15.979zM6.156,11.709H2.74c-0.235,0-0.427,0.191-0.427,0.426v4.271c0,0.234,0.192,0.427,0.427,0.427h3.417c0.235,0,0.427-0.192,0.427-0.427v-4.271C6.583,11.9,6.391,11.709,6.156,11.709 M5.729,15.979H3.167v-3.416h2.562V15.979zM17.261,3.167h-3.417c-0.235,0-0.427,0.192-0.427,0.427v12.812c0,0.234,0.191,0.427,0.427,0.427h3.417c0.234,0,0.427-0.192,0.427-0.427V3.594C17.688,3.359,17.495,3.167,17.261,3.167 M16.833,15.979h-2.562V4.021h2.562V15.979z","size":20,"color":"darkorange"},{"tag":"games","tech":"Games","name":"M15 7.5V2H9v5.5l3 3 3-3zM7.5 9H2v6h5.5l3-3-3-3zM9 16.5V22h6v-5.5l-3-3-3 3zM16.5 9l-3 3 3 3H22V9h-5.5z","size":20,"color":"rebeccapurple"}]}},"allMarkdownRemark":{"totalCount":4,"edges":[{"node":{"excerpt":"Introduction Project: Finding Donors for CharityML Welcome to the second project of the Machine Learning Engineer Nanodegree! In this notebook, some template code has already been provided for you…","html":"<h1>Introduction</h1>\n<h2>Project: Finding Donors for <em>CharityML</em></h2>\n<p>Welcome to the second project of the Machine Learning Engineer Nanodegree! In this notebook, some template code has already been provided for you, and it will be your job to implement the additional functionality necessary to successfully complete this project. Sections that begin with <strong>'Implementation'</strong> in the header indicate that the following block of code will require additional functionality which you must provide. Instructions will be provided for each section and the specifics of the implementation are marked in the code block with a <code class=\"language-text\">&#39;TODO&#39;</code> statement. Please be sure to read the instructions carefully!</p>\n<p>In addition to implementing code, there will be questions that you must answer which relate to the project and your implementation. Each section where you will answer a question is preceded by a <strong>'Question X'</strong> header. Carefully read each question and provide thorough answers in the following text boxes that begin with <strong>'Answer:'</strong>. Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide.  </p>\n<blockquote>\n<p><strong>Note:</strong> Please specify WHICH VERSION OF PYTHON you are using when submitting this notebook. Code and Markdown cells can be executed using the <strong>Shift + Enter</strong> keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode.</p>\n</blockquote>\n<h2>Getting Started</h2>\n<p>In this project, you will employ several supervised algorithms of your choice to accurately model individuals' income using data collected from the 1994 U.S. Census. You will then choose the best candidate algorithm from preliminary results and further optimize this algorithm to best model the data. Your goal with this implementation is to construct a model that accurately predicts whether an individual makes more than $50,000. This sort of task can arise in a non-profit setting, where organizations survive on donations.  Understanding an individual's income can help a non-profit better understand how large of a donation to request, or whether or not they should reach out to begin with.  While it can be difficult to determine an individual's general income bracket directly from public sources, we can (as we will see) infer this value from other publically available features. </p>\n<p>The dataset for this project originates from the <a href=\"https://archive.ics.uci.edu/ml/datasets/Census+Income\">UCI Machine Learning Repository</a>. The datset was donated by Ron Kohavi and Barry Becker, after being published in the article <em>\"Scaling Up the Accuracy of Naive-Bayes Classifiers: A Decision-Tree Hybrid\"</em>. You can find the article by Ron Kohavi <a href=\"https://www.aaai.org/Papers/KDD/1996/KDD96-033.pdf\">online</a>. The data we investigate here consists of small changes to the original dataset, such as removing the <code class=\"language-text\">&#39;fnlwgt&#39;</code> feature and records with missing or ill-formatted entries.</p>\n<hr>\n<h2>Exploring the Data</h2>\n<p>Run the code cell below to load necessary Python libraries and load the census data. Note that the last column from this dataset, <code class=\"language-text\">&#39;income&#39;</code>, will be our target label (whether an individual makes more than, or at most, $50,000 annually). All other columns are features about each individual in the census database.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Import libraries necessary for this project</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> IPython<span class=\"token punctuation\">.</span>display <span class=\"token keyword\">import</span> display<span class=\"token punctuation\">,</span> HTML <span class=\"token comment\"># Allows the use of display() for DataFrames</span>\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\n<span class=\"token comment\"># Import supplementary visualization code visuals.py</span>\n<span class=\"token keyword\">import</span> visuals <span class=\"token keyword\">as</span> vs\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> warnings\nwarnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">\"ignore\"</span><span class=\"token punctuation\">,</span> category<span class=\"token operator\">=</span>RuntimeWarning<span class=\"token punctuation\">)</span> \nnp<span class=\"token punctuation\">.</span>warnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Pretty display for notebooks</span>\n<span class=\"token operator\">%</span>matplotlib inline\n<span class=\"token operator\">%</span>lsmagic\n<span class=\"token comment\"># %pylab inline</span>\nsns<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>color_codes<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Load the Census dataset</span>\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"census.csv\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data upload done'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Data upload done</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Section for helper functions</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">display_html</span><span class=\"token punctuation\">(</span>display_string<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> heading_value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'h4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Display some text in HTML form inside the display sections\n    \"\"\"</span>\n    display<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">' &lt;span style=\"color:{0}\">&lt;{2}>{1}&lt;/{2}> &lt;/span>  '</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> display_string<span class=\"token punctuation\">,</span> heading_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_general_information</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Display general information related to data\n    \"\"\"</span>\n    display_html<span class=\"token punctuation\">(</span><span class=\"token string\">'Display basic information about the records \"{}\":'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Success - Display the first record</span>\n    display<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    display<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get an overview of the data before we proceed:\"</span><span class=\"token punctuation\">)</span>\n    display<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    display_html<span class=\"token punctuation\">(</span><span class=\"token string\">'Checking the shape of the data:'</span><span class=\"token punctuation\">)</span>\n    display<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Print unique values in the income column. This is the column that will be used for training and prediction.</span>\n    display_html<span class=\"token punctuation\">(</span><span class=\"token string\">'Check the unique values for income:'</span><span class=\"token punctuation\">)</span>\n    display<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">display_pair_plot</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Display pairplot\n    \"\"\"</span>\n    display_html<span class=\"token punctuation\">(</span><span class=\"token string\">'Pairplot \"{}\":'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sns<span class=\"token punctuation\">.</span>pairplot<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">print_general_information<span class=\"token punctuation\">(</span><span class=\"token string\">'Data Variable'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color:blue\"><h4>Display basic information about the records \"Data Variable\":</h4> </span>  </p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>workclass</th>\n      <th>education_level</th>\n      <th>education-num</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>native-country</th>\n      <th>income</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39</td>\n      <td>State-gov</td>\n      <td>Bachelors</td>\n      <td>13.0</td>\n      <td>Never-married</td>\n      <td>Adm-clerical</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>2174.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>50</td>\n      <td>Self-emp-not-inc</td>\n      <td>Bachelors</td>\n      <td>13.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Exec-managerial</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>13.0</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38</td>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>9.0</td>\n      <td>Divorced</td>\n      <td>Handlers-cleaners</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53</td>\n      <td>Private</td>\n      <td>11th</td>\n      <td>7.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Handlers-cleaners</td>\n      <td>Husband</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>28</td>\n      <td>Private</td>\n      <td>Bachelors</td>\n      <td>13.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Wife</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Cuba</td>\n      <td>&lt;=50K</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 45222 entries, 0 to 45221\nData columns (total 14 columns):\nage                45222 non-null int64\nworkclass          45222 non-null object\neducation_level    45222 non-null object\neducation-num      45222 non-null float64\nmarital-status     45222 non-null object\noccupation         45222 non-null object\nrelationship       45222 non-null object\nrace               45222 non-null object\nsex                45222 non-null object\ncapital-gain       45222 non-null float64\ncapital-loss       45222 non-null float64\nhours-per-week     45222 non-null float64\nnative-country     45222 non-null object\nincome             45222 non-null object\ndtypes: float64(4), int64(1), object(9)\nmemory usage: 4.8+ MB\n\n\n\nNone\n\n\nGet an overview of the data before we proceed:</code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>education-num</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>38.547941</td>\n      <td>10.118460</td>\n      <td>1101.430344</td>\n      <td>88.595418</td>\n      <td>40.938017</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>13.217870</td>\n      <td>2.552881</td>\n      <td>7506.430084</td>\n      <td>404.956092</td>\n      <td>12.007508</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>17.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>28.000000</td>\n      <td>9.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>40.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>37.000000</td>\n      <td>10.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>40.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>47.000000</td>\n      <td>13.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>45.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>90.000000</td>\n      <td>16.000000</td>\n      <td>99999.000000</td>\n      <td>4356.000000</td>\n      <td>99.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><span style=\"color:blue\"><h4>Checking the shape of the data:</h4> </span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(45222, 14)</code></pre></div>\n<p><span style=\"color:blue\"><h4>Check the unique values for income:</h4> </span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">array([&#39;&lt;=50K&#39;, &#39;&gt;50K&#39;], dtype=object)</code></pre></div>\n<p><strong>Checking the pairplot</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">display_pair_plot<span class=\"token punctuation\">(</span><span class=\"token string\">'Data Variable'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color:blue\"><h4>Pairplot \"Data Variable\":</h4> </span>  </p>\n<p><img src=\"output_8_1.png\" alt=\"png\"></p>\n<h3>Implementation: Data Exploration</h3>\n<p>A cursory investigation of the dataset will determine how many individuals fit into either group, and will tell us about the percentage of these individuals making more than $50,000. In the code cell below, you will need to compute the following:</p>\n<ul>\n<li>The total number of records, <code class=\"language-text\">&#39;n_records&#39;</code></li>\n<li>The number of individuals making more than $50,000 annually, <code class=\"language-text\">&#39;n_greater_50k&#39;</code>.</li>\n<li>The number of individuals making at most $50,000 annually, <code class=\"language-text\">&#39;n_at_most_50k&#39;</code>.</li>\n<li>The percentage of individuals making more than $50,000 annually, <code class=\"language-text\">&#39;greater_percent&#39;</code>.</li>\n</ul>\n<p><strong>HINT:</strong> You may need to look at the table above to understand how the <code class=\"language-text\">&#39;income&#39;</code> entries are formatted. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># TODO: Total number of records</span>\nn_records <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>alen<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Number of records where individual's income is more than $50,000</span>\nn_greater_50k <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> <span class=\"token string\">'>50K'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># TODO: Number of records where individual's income is at most $50,000</span>\nn_at_most_50k <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>alen<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>income <span class=\"token operator\">==</span> <span class=\"token string\">'&lt;=50K'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Percentage of individuals whose income is more than $50,000</span>\ngreater_percent <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span>n_greater_50k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Print the results</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total number of records: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n_records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Individuals making more than $50,000: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n_greater_50k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Individuals making at most $50,000: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n_at_most_50k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Percentage of individuals making more than $50,000: {}%\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>greater_percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Total number of records: 45222\nIndividuals making more than $50,000: 11208\nIndividuals making at most $50,000: 34014\nPercentage of individuals making more than $50,000: 24.78439697492371%</code></pre></div>\n<p><strong>Features</strong></p>\n<ul>\n<li><code class=\"language-text\">age</code>: Age (continuous)</li>\n<li><code class=\"language-text\">workclass</code>: Working Class (Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked)</li>\n<li><code class=\"language-text\">education_level</code>: Level of Education (Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool)</li>\n<li><code class=\"language-text\">education-num</code>: Number of educational years completed (continuous)</li>\n<li><code class=\"language-text\">marital-status</code>: Marital status (Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse)</li>\n<li><code class=\"language-text\">occupation</code>: Work Occupation (Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces)</li>\n<li><code class=\"language-text\">relationship</code>: Relationship Status (Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried)</li>\n<li><code class=\"language-text\">race</code>: Race (White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black)</li>\n<li><code class=\"language-text\">sex</code>: Sex (Female, Male)</li>\n<li><code class=\"language-text\">capital-gain</code>: Monetary Capital Gains (continuous)</li>\n<li><code class=\"language-text\">capital-loss</code>: Monetary Capital Losses (continuous)</li>\n<li><code class=\"language-text\">hours-per-week</code>: Average Hours Per Week Worked (continuous)</li>\n<li><code class=\"language-text\">native-country</code>: Native Country (United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&#x26;Tobago, Peru, Hong, Holand-Netherlands)</li>\n</ul>\n<p><strong>Target Variable</strong></p>\n<ul>\n<li><code class=\"language-text\">income</code>: Income Class (&#x3C;=50K, >50K)</li>\n</ul>\n<hr>\n<h2>Preparing the Data</h2>\n<p>Before data can be used as input for machine learning algorithms, it often must be cleaned, formatted, and restructured — this is typically known as <strong>preprocessing</strong>. Fortunately, for this dataset, there are no invalid or missing entries we must deal with, however, there are some qualities about certain features that must be adjusted. This preprocessing can help tremendously with the outcome and predictive power of nearly all learning algorithms.</p>\n<h3>Transforming Skewed Continuous Features</h3>\n<p>A dataset may sometimes contain at least one feature whose values tend to lie near a single number, but will also have a non-trivial number of vastly larger or smaller values than that single number.  Algorithms can be sensitive to such distributions of values and can underperform if the range is not properly normalized. With the census dataset two features fit this description: '<code class=\"language-text\">capital-gain&#39;</code> and <code class=\"language-text\">&#39;capital-loss&#39;</code>. </p>\n<p>Run the code cell below to plot a histogram of these two features. Note the range of the values present and how they are distributed.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Split the data into features and target label</span>\nincome_raw <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">]</span>\nfeatures_raw <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Visualize skewed continuous features of original data</span>\nvs<span class=\"token punctuation\">.</span>distribution<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"output_14_0.png\" alt=\"png\"></p>\n<p>For highly-skewed feature distributions such as <code class=\"language-text\">&#39;capital-gain&#39;</code> and <code class=\"language-text\">&#39;capital-loss&#39;</code>, it is common practice to apply a <a href=\"https://en.wikipedia.org/wiki/Data_transformation_(statistics)\">logarithmic transformation</a> on the data so that the very large and very small values do not negatively affect the performance of a learning algorithm. Using a logarithmic transformation significantly reduces the range of values caused by outliers. Care must be taken when applying this transformation however: The logarithm of <code class=\"language-text\">0</code> is undefined, so we must translate the values by a small amount above <code class=\"language-text\">0</code> to apply the the logarithm successfully.</p>\n<p>Run the code cell below to perform a transformation on the data and visualize the results. Again, note the range of values and how they are distributed. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Log-transform the skewed features</span>\nskewed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'capital-gain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'capital-loss'</span><span class=\"token punctuation\">]</span>\nfeatures_log_transformed <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> features_raw<span class=\"token punctuation\">)</span>\nfeatures_log_transformed<span class=\"token punctuation\">[</span>skewed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features_raw<span class=\"token punctuation\">[</span>skewed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Visualize the new log distributions</span>\nvs<span class=\"token punctuation\">.</span>distribution<span class=\"token punctuation\">(</span>features_log_transformed<span class=\"token punctuation\">,</span> transformed <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ndisplay<span class=\"token punctuation\">(</span>features_log_transformed<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>workclass</th>\n      <th>education_level</th>\n      <th>education-num</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>native-country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39</td>\n      <td>State-gov</td>\n      <td>Bachelors</td>\n      <td>13.0</td>\n      <td>Never-married</td>\n      <td>Adm-clerical</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>7.684784</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>50</td>\n      <td>Self-emp-not-inc</td>\n      <td>Bachelors</td>\n      <td>13.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Exec-managerial</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>13.0</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38</td>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>9.0</td>\n      <td>Divorced</td>\n      <td>Handlers-cleaners</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53</td>\n      <td>Private</td>\n      <td>11th</td>\n      <td>7.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Handlers-cleaners</td>\n      <td>Husband</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>28</td>\n      <td>Private</td>\n      <td>Bachelors</td>\n      <td>13.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Wife</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Cuba</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><img src=\"output_16_1.png\" alt=\"png\"></p>\n<h3>Normalizing Numerical Features</h3>\n<p>In addition to performing transformations on features that are highly skewed, it is often good practice to perform some type of scaling on numerical features. Applying a scaling to the data does not change the shape of each feature's distribution (such as <code class=\"language-text\">&#39;capital-gain&#39;</code> or <code class=\"language-text\">&#39;capital-loss&#39;</code> above); however, normalization ensures that each feature is treated equally when applying supervised learners. Note that once scaling is applied, observing the data in its raw form will no longer have the same original meaning, as exampled below.</p>\n<p>Run the code cell below to normalize each numerical feature. We will use <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html\"><code class=\"language-text\">sklearn.preprocessing.MinMaxScaler</code></a> for this.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Import sklearn.preprocessing.StandardScaler</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler\n\n<span class=\"token comment\"># Initialize a scaler, then apply it to the features</span>\nscaler <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># default=(0, 1)</span>\nnumerical <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'education-num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'capital-gain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'capital-loss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hours-per-week'</span><span class=\"token punctuation\">]</span>\n\nfeatures_log_minmax_transform <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> features_log_transformed<span class=\"token punctuation\">)</span>\nfeatures_log_minmax_transform<span class=\"token punctuation\">[</span>numerical<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>features_log_transformed<span class=\"token punctuation\">[</span>numerical<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Show an example of a record with scaling applied</span>\ndisplay<span class=\"token punctuation\">(</span>features_log_minmax_transform<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nvs<span class=\"token punctuation\">.</span>distribution<span class=\"token punctuation\">(</span>features_log_transformed<span class=\"token punctuation\">,</span> transformed <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>workclass</th>\n      <th>education_level</th>\n      <th>education-num</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>native-country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.301370</td>\n      <td>State-gov</td>\n      <td>Bachelors</td>\n      <td>0.800000</td>\n      <td>Never-married</td>\n      <td>Adm-clerical</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.667492</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.452055</td>\n      <td>Self-emp-not-inc</td>\n      <td>Bachelors</td>\n      <td>0.800000</td>\n      <td>Married-civ-spouse</td>\n      <td>Exec-managerial</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.122449</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.287671</td>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>0.533333</td>\n      <td>Divorced</td>\n      <td>Handlers-cleaners</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.493151</td>\n      <td>Private</td>\n      <td>11th</td>\n      <td>0.400000</td>\n      <td>Married-civ-spouse</td>\n      <td>Handlers-cleaners</td>\n      <td>Husband</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.150685</td>\n      <td>Private</td>\n      <td>Bachelors</td>\n      <td>0.800000</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Wife</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>Cuba</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><img src=\"output_18_1.png\" alt=\"png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Print the experimental data as pairplots after similar processing</span>\n<span class=\"token comment\"># Data for some further experiment</span>\nexperiment_data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"census.csv\"</span><span class=\"token punctuation\">)</span>\nexperiment_data<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">plot_experimental_pairplot</span><span class=\"token punctuation\">(</span>expdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Log-transform the skewed features</span>\n    skewed_cols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'capital-gain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'capital-loss'</span><span class=\"token punctuation\">]</span>\n    expdata<span class=\"token punctuation\">[</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> expdata<span class=\"token punctuation\">[</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token string\">'>50K'</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    expdata<span class=\"token punctuation\">[</span>skewed_cols<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> expdata<span class=\"token punctuation\">[</span>skewed_cols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Initialize a scaler, then apply it to the features</span>\n    scaler <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># default=(0, 1)</span>\n    numerical_cols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'education-num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'capital-gain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'capital-loss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hours-per-week'</span><span class=\"token punctuation\">]</span>\n    expdata<span class=\"token punctuation\">[</span>numerical_cols<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>expdata<span class=\"token punctuation\">[</span>numerical_cols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    display<span class=\"token punctuation\">(</span>expdata<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    display_pair_plot<span class=\"token punctuation\">(</span><span class=\"token string\">'Exp Data Variable'</span><span class=\"token punctuation\">,</span> expdata<span class=\"token punctuation\">)</span>\n\nplot_experimental_pairplot<span class=\"token punctuation\">(</span>experiment_data<span class=\"token punctuation\">)</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>workclass</th>\n      <th>education_level</th>\n      <th>education-num</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>native-country</th>\n      <th>income</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.301370</td>\n      <td>State-gov</td>\n      <td>Bachelors</td>\n      <td>0.800000</td>\n      <td>Never-married</td>\n      <td>Adm-clerical</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.667492</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>United-States</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.452055</td>\n      <td>Self-emp-not-inc</td>\n      <td>Bachelors</td>\n      <td>0.800000</td>\n      <td>Married-civ-spouse</td>\n      <td>Exec-managerial</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.122449</td>\n      <td>United-States</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.287671</td>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>0.533333</td>\n      <td>Divorced</td>\n      <td>Handlers-cleaners</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>United-States</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.493151</td>\n      <td>Private</td>\n      <td>11th</td>\n      <td>0.400000</td>\n      <td>Married-civ-spouse</td>\n      <td>Handlers-cleaners</td>\n      <td>Husband</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>United-States</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.150685</td>\n      <td>Private</td>\n      <td>Bachelors</td>\n      <td>0.800000</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Wife</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>Cuba</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><span style=\"color:blue\"><h4>Pairplot \"Exp Data Variable\":</h4> </span>  </p>\n<p><img src=\"output_19_2.png\" alt=\"png\"></p>\n<h3>Implementation: Data Preprocessing</h3>\n<p>From the table in <strong>Exploring the Data</strong> above, we can see there are several features for each record that are non-numeric. Typically, learning algorithms expect input to be numeric, which requires that non-numeric features (called <em>categorical variables</em>) be converted. One popular way to convert categorical variables is by using the <strong>one-hot encoding</strong> scheme. One-hot encoding creates a <em>\"dummy\"</em> variable for each possible category of each non-numeric feature. For example, assume <code class=\"language-text\">someFeature</code> has three possible entries: <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code>, or <code class=\"language-text\">C</code>. We then encode this feature into <code class=\"language-text\">someFeature_A</code>, <code class=\"language-text\">someFeature_B</code> and <code class=\"language-text\">someFeature_C</code>.</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>someFeature</th>\n<th></th>\n<th>someFeature_A</th>\n<th>someFeature_B</th>\n<th>someFeature_C</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>B</td>\n<td></td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>C</td>\n<td>----> one-hot encode ----></td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>A</td>\n<td></td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>Additionally, as with the non-numeric features, we need to convert the non-numeric target label, <code class=\"language-text\">&#39;income&#39;</code> to numerical values for the learning algorithm to work. Since there are only two possible categories for this label (\"&#x3C;=50K\" and \">50K\"), we can avoid using one-hot encoding and simply encode these two categories as <code class=\"language-text\">0</code> and <code class=\"language-text\">1</code>, respectively. In code cell below, you will need to implement the following:</p>\n<ul>\n<li>Use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html?highlight=get_dummies#pandas.get_dummies\"><code class=\"language-text\">pandas.get_dummies()</code></a> to perform one-hot encoding on the <code class=\"language-text\">&#39;features_log_minmax_transform&#39;</code> data.</li>\n<li>\n<p>Convert the target label <code class=\"language-text\">&#39;income_raw&#39;</code> to numerical entries.</p>\n<ul>\n<li>Set records with \"&#x3C;=50K\" to <code class=\"language-text\">0</code> and records with \">50K\" to <code class=\"language-text\">1</code>.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># TODO: One-hot encode the 'features_log_minmax_transform' data using pandas.get_dummies()</span>\nfeatures_final <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>get_dummies<span class=\"token punctuation\">(</span>features_log_minmax_transform<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Encode the 'income_raw' data to numerical values</span>\nincome <span class=\"token operator\">=</span> income_raw<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token string\">'>50K'</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Print the number of features after one-hot encoding</span>\nencoded <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>features_final<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} total features after one-hot encoding.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndisplay<span class=\"token punctuation\">(</span>features_final<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfeatures_final<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># display_html(\"Encoded Value:\")</span>\n<span class=\"token comment\"># display(encoded)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">103 total features after one-hot encoding.</code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>education-num</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>workclass_ Federal-gov</th>\n      <th>workclass_ Local-gov</th>\n      <th>workclass_ Private</th>\n      <th>workclass_ Self-emp-inc</th>\n      <th>workclass_ Self-emp-not-inc</th>\n      <th>...</th>\n      <th>native-country_ Portugal</th>\n      <th>native-country_ Puerto-Rico</th>\n      <th>native-country_ Scotland</th>\n      <th>native-country_ South</th>\n      <th>native-country_ Taiwan</th>\n      <th>native-country_ Thailand</th>\n      <th>native-country_ Trinadad&amp;Tobago</th>\n      <th>native-country_ United-States</th>\n      <th>native-country_ Vietnam</th>\n      <th>native-country_ Yugoslavia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.301370</td>\n      <td>0.800000</td>\n      <td>0.667492</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.452055</td>\n      <td>0.800000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.122449</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.287671</td>\n      <td>0.533333</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.493151</td>\n      <td>0.400000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.150685</td>\n      <td>0.800000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.397959</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 103 columns</p>\n</div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>education-num</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>workclass_ Federal-gov</th>\n      <th>workclass_ Local-gov</th>\n      <th>workclass_ Private</th>\n      <th>workclass_ Self-emp-inc</th>\n      <th>workclass_ Self-emp-not-inc</th>\n      <th>...</th>\n      <th>native-country_ Portugal</th>\n      <th>native-country_ Puerto-Rico</th>\n      <th>native-country_ Scotland</th>\n      <th>native-country_ South</th>\n      <th>native-country_ Taiwan</th>\n      <th>native-country_ Thailand</th>\n      <th>native-country_ Trinadad&amp;Tobago</th>\n      <th>native-country_ United-States</th>\n      <th>native-country_ Vietnam</th>\n      <th>native-country_ Yugoslavia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>...</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n      <td>45222.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.295177</td>\n      <td>0.607897</td>\n      <td>0.064342</td>\n      <td>0.042423</td>\n      <td>0.407531</td>\n      <td>0.031091</td>\n      <td>0.068551</td>\n      <td>0.736522</td>\n      <td>0.036398</td>\n      <td>0.083941</td>\n      <td>...</td>\n      <td>0.001371</td>\n      <td>0.003870</td>\n      <td>0.000442</td>\n      <td>0.002233</td>\n      <td>0.001216</td>\n      <td>0.000641</td>\n      <td>0.000575</td>\n      <td>0.913095</td>\n      <td>0.001835</td>\n      <td>0.000509</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.181067</td>\n      <td>0.170192</td>\n      <td>0.214240</td>\n      <td>0.190454</td>\n      <td>0.122526</td>\n      <td>0.173566</td>\n      <td>0.252691</td>\n      <td>0.440524</td>\n      <td>0.187281</td>\n      <td>0.277303</td>\n      <td>...</td>\n      <td>0.037002</td>\n      <td>0.062088</td>\n      <td>0.021026</td>\n      <td>0.047207</td>\n      <td>0.034854</td>\n      <td>0.025316</td>\n      <td>0.023971</td>\n      <td>0.281698</td>\n      <td>0.042803</td>\n      <td>0.022547</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.150685</td>\n      <td>0.533333</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.397959</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.273973</td>\n      <td>0.600000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.397959</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.410959</td>\n      <td>0.800000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.448980</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 103 columns</p>\n</div>\n<h3>Shuffle and Split Data</h3>\n<p>Now all <em>categorical variables</em> have been converted into numerical features, and all numerical features have been normalized. As always, we will now split the data (both features and their labels) into training and test sets. 80% of the data will be used for training and 20% for testing.</p>\n<p>Run the code cell below to perform this split.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Import train_test_split</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\n\n<span class=\"token comment\"># Split the 'features' and 'income' data into training and testing sets</span>\nX_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>features_final<span class=\"token punctuation\">,</span> \n                                                    income<span class=\"token punctuation\">,</span> \n                                                    test_size <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> \n                                                    random_state <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># I use 43 as seed mostly because it introduced me to the Additive number theory in last one month</span>\n<span class=\"token comment\"># 43 is the smallest prime number expressible as the sum of 2, 3, 4, or 5</span>\n\n<span class=\"token comment\"># Show the results of the split</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Training set has {} samples.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Testing set has {} samples.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Training set has 36177 samples.\nTesting set has 9045 samples.</code></pre></div>\n<hr>\n<h2>Evaluating Model Performance</h2>\n<p>In this section, we will investigate four different algorithms, and determine which is best at modeling the data. Three of these algorithms will be supervised learners of your choice, and the fourth algorithm is known as a <em>naive predictor</em>.</p>\n<h3>Metrics and the Naive Predictor</h3>\n<p><em>CharityML</em>, equipped with their research, knows individuals that make more than $50,000 are most likely to donate to their charity. Because of this, <em>CharityML</em> is particularly interested in predicting who makes more than $50,000 accurately. It would seem that using <strong>accuracy</strong> as a metric for evaluating a particular model's performace would be appropriate. Additionally, identifying someone that <em>does not</em> make more than $50,000 as someone who does would be detrimental to <em>CharityML</em>, since they are looking to find individuals willing to donate. Therefore, a model's ability to precisely predict those that make more than $50,000 is <em>more important</em> than the model's ability to <strong>recall</strong> those individuals. We can use <strong>F-beta score</strong> as a metric that considers both precision and recall:</p>\n<p>$$ F_{\\beta} = (1 + \\beta^2) \\cdot \\frac{precision \\cdot recall}{\\left( \\beta^2 \\cdot precision \\right) + recall} $$</p>\n<p>In particular, when $\\beta = 0.5$, more emphasis is placed on precision. This is called the <strong>F$_{0.5}$ score</strong> (or F-score for simplicity).</p>\n<p>Looking at the distribution of classes (those who make at most 50,000, and those who make more), it's clear most individuals do not make more than $50,000. This can greatly affect <strong>accuracy</strong>, since we could simply say <em>\"this person does not make more than $50,000\"</em> and generally be right, without ever looking at the data! Making such a statement would be called <strong>naive</strong>, since we have not considered any information to substantiate the claim. It is always important to consider the <em>naive prediction</em> for your data, to help establish a benchmark for whether a model is performing well. That been said, using that prediction would be pointless: If we predicted all people made less than $50,000, <em>CharityML</em> would identify no one as donors. </p>\n<h4>Note: Recap of accuracy, precision, recall</h4>\n<p><strong>Accuracy</strong> measures how often the classifier makes the correct prediction. It’s the ratio of the number of correct predictions to the total number of predictions (the number of test data points).</p>\n<p><strong>Precision</strong> tells us what proportion of messages we classified as spam, actually were spam.\nIt is a ratio of true positives(words classified as spam, and which are actually spam) to all positives(all words classified as spam, irrespective of whether that was the correct classificatio), in other words it is the ratio of</p>\n<p><code class=\"language-text\">[True Positives/(True Positives + False Positives)]</code></p>\n<p><strong>Recall(sensitivity)</strong> tells us what proportion of messages that actually were spam were classified by us as spam.\nIt is a ratio of true positives(words classified as spam, and which are actually spam) to all the words that were actually spam, in other words it is the ratio of</p>\n<p><code class=\"language-text\">[True Positives/(True Positives + False Negatives)]</code></p>\n<p>For classification problems that are skewed in their classification distributions like in our case, for example if we had a 100 text messages and only 2 were spam and the rest 98 weren't, accuracy by itself is not a very good metric. We could classify 90 messages as not spam(including the 2 that were spam but we classify them as not spam, hence they would be false negatives) and 10 as spam(all 10 false positives) and still get a reasonably good accuracy score. For such cases, precision and recall come in very handy. These two metrics can be combined to get the F1 score, which is weighted average(harmonic mean) of the precision and recall scores. This score can range from 0 to 1, with 1 being the best possible F1 score(we take the harmonic mean as we are dealing with ratios).</p>\n<h3>Question 1 - Naive Predictor Performace</h3>\n<ul>\n<li>If we chose a model that always predicted an individual made more than $50,000, what would  that model's accuracy and F-score be on this dataset? You must use the code cell below and assign your results to <code class=\"language-text\">&#39;accuracy&#39;</code> and <code class=\"language-text\">&#39;fscore&#39;</code> to be used later.</li>\n</ul>\n<p><strong>Please note</strong> that the the purpose of generating a naive predictor is simply to show what a base model without any intelligence would look like. In the real world, ideally your base model would be either the results of a previous model or could be based on a research paper upon which you are looking to improve. When there is no benchmark model set, getting a result better than random choice is a place you could start from.</p>\n<p><strong>HINT:</strong> </p>\n<ul>\n<li>When we have a model that always predicts '1' (i.e. the individual makes more than 50k) then our model will have no True Negatives(TN) or False Negatives(FN) as we are not making any negative('0' value) predictions. Therefore our Accuracy in this case becomes the same as our Precision(True Positives/(True Positives + False Positives)) as every prediction that we have made with value '1' that should have '0' becomes a False Positive; therefore our denominator in this case is the total number of records we have in total. </li>\n<li>Our Recall score(True Positives/(True Positives + False Negatives)) in this setting becomes 1 as we have no False Negatives.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\nTP = np.sum(income) # Counting the ones as this is the naive case. Note that 'income' is the 'income_raw' data \nencoded to numerical values done in the data preprocessing step.\nFP = income.count() - TP # Specific to the naive case\n\nTN = 0 # No predicted negatives in the naive case\nFN = 0 # No predicted negatives in the naive case\n'''</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> accuracy_score<span class=\"token punctuation\">,</span> precision_score<span class=\"token punctuation\">,</span> recall_score<span class=\"token punctuation\">,</span> fbeta_score\n\n<span class=\"token comment\"># Calculating the performance without sklearn</span>\ndisplay_html<span class=\"token punctuation\">(</span><span class=\"token string\">\"Calculating the performance without sklearn:\"</span><span class=\"token punctuation\">)</span>\nTP <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>income<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nFP <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>income<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nTN <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\nFN <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Calculate accuracy, precision and recall</span>\naccuracy <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span>TP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> income<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nprecision <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">(</span>TP<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>TP<span class=\"token punctuation\">,</span> FP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrecall <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">(</span>TP<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>TP<span class=\"token punctuation\">,</span> FN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accuracy = {}, recall = {}, precision = {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy<span class=\"token punctuation\">,</span> recall<span class=\"token punctuation\">,</span> precision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Calculate F-score using the formula above for beta = 0.5 and correct values for precision and recall.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">calculate_fscore</span><span class=\"token punctuation\">(</span>precision<span class=\"token punctuation\">,</span> recall<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    b2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    numerator <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>precision<span class=\"token punctuation\">,</span> recall<span class=\"token punctuation\">)</span>\n    numerator <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>b2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    denominator <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">,</span> precision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> recall<span class=\"token punctuation\">)</span>\n    fscore_ret <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span> denominator<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> fscore_ret\n\nbeta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\nfscore <span class=\"token operator\">=</span> calculate_fscore<span class=\"token punctuation\">(</span>precision<span class=\"token operator\">=</span>precision<span class=\"token punctuation\">,</span> recall<span class=\"token operator\">=</span>recall<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>beta<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Print the results </span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Naive Predictor: [Accuracy score: {:.4f}, F-score: {:.4f}]\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy<span class=\"token punctuation\">,</span> fscore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Calculating the performance with sklearn</span>\ndisplay_html<span class=\"token punctuation\">(</span><span class=\"token string\">\"Calculating the performance with sklearn:\"</span><span class=\"token punctuation\">)</span>\nall_one_pred <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>income<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\naccuracy <span class=\"token operator\">=</span> accuracy_score<span class=\"token punctuation\">(</span>income<span class=\"token punctuation\">,</span> all_one_pred<span class=\"token punctuation\">)</span>\nprecision <span class=\"token operator\">=</span> precision_score<span class=\"token punctuation\">(</span>y_true<span class=\"token operator\">=</span>income<span class=\"token punctuation\">,</span> y_pred<span class=\"token operator\">=</span>all_one_pred<span class=\"token punctuation\">)</span>\nrecall <span class=\"token operator\">=</span> recall_score<span class=\"token punctuation\">(</span>y_true<span class=\"token operator\">=</span>income<span class=\"token punctuation\">,</span> y_pred<span class=\"token operator\">=</span>all_one_pred<span class=\"token punctuation\">)</span>\nfscore <span class=\"token operator\">=</span> calculate_fscore<span class=\"token punctuation\">(</span>precision<span class=\"token operator\">=</span>precision<span class=\"token punctuation\">,</span> recall<span class=\"token operator\">=</span>recall<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>beta<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accuracy = {}, recall = {}, precision = {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy<span class=\"token punctuation\">,</span> recall<span class=\"token punctuation\">,</span> precision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Naive Predictor: [Accuracy score: {:.4f}, F-score: {:.4f}]\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy<span class=\"token punctuation\">,</span> fscore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color:blue\"><h4>Calculating the performance without sklearn:</h4> </span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">accuracy = 0.2478439697492371, recall = 1.0, precision = 0.2478439697492371\nNaive Predictor: [Accuracy score: 0.2478, F-score: 0.2917]</code></pre></div>\n<p><span style=\"color:blue\"><h4>Calculating the performance with sklearn:</h4> </span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">accuracy = 0.2478439697492371, recall = 1.0, precision = 0.2478439697492371\nNaive Predictor: [Accuracy score: 0.2478, F-score: 0.2917]</code></pre></div>\n<h3>Supervised Learning Models</h3>\n<p><strong>The following are some of the supervised learning models that are currently available in</strong> <a href=\"http://scikit-learn.org/stable/supervised_learning.html\"><code class=\"language-text\">scikit-learn</code></a> <strong>that you may choose from:</strong></p>\n<ul>\n<li>Gaussian Naive Bayes (GaussianNB)</li>\n<li>Decision Trees</li>\n<li>Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting)</li>\n<li>K-Nearest Neighbors (KNeighbors)</li>\n<li>Stochastic Gradient Descent Classifier (SGDC)</li>\n<li>Support Vector Machines (SVM)</li>\n<li>Logistic Regression</li>\n</ul>\n<h3>Question 2 - Model Application</h3>\n<p>List three of the supervised learning models above that are appropriate for this problem that you will test on the census data. For each model chosen</p>\n<ul>\n<li>Describe one real-world application in industry where the model can be applied. </li>\n<li>What are the strengths of the model; when does it perform well?</li>\n<li>What are the weaknesses of the model; when does it perform poorly?</li>\n<li>What makes this model a good candidate for the problem, given what you know about the data?</li>\n</ul>\n<p><strong>HINT:</strong></p>\n<p>Structure your answer in the same format as above^, with 4 parts for each of the three models you pick. Please include references with your answer.</p>\n<p><strong>Answer:</strong></p>\n<p>This is a classification problem and the output is either 0 or 1 so following are the methods I will be using to test on the census data (The links for various articles and books are provided in the reference section at the end):</p>\n<p><em><code class=\"language-text\">Logistic Regression</code></em></p>\n<ul>\n<li><em>Real World Application</em>: <a href=\"http://theses.gla.ac.uk/4624/56/2013reardonphd.pdf\">Investigation of risk factors associated with injuries to horses undertaking jump racing in Great Britain</a></li>\n<li><em>Strengths of the model</em>:</li>\n<li>Easy to underatand and interprete, so a good baseline to start with and quickly get some answer.</li>\n<li>Easy on computing resources and effecient to train</li>\n<li>It has low variance and so is less prone to over-fitting</li>\n<li>Can provide good results in case of less features</li>\n<li><em>Weakness of the model</em>:</li>\n<li>Cannot solve non-linear problem with this, the descision surface is linear for logistic regression.</li>\n<li>Sensitive to outliers.</li>\n<li>Logistic regression requires that the variables are independent, so in the training data care has to be given to include only indepenedent variables.</li>\n<li>Needs large sample size to provide stable results.</li>\n<li><em>Why use</em>:</li>\n<li>This is a binary clasification problem of detecting if the income is over 50K or not. So logistic regression can be employed here. The benefit of having logistic regression is that its simple to implement and then the model can be improved( like using stochastic gradient descent). I believe this will act as a better baseline than the naive method we used earlier.</li>\n</ul>\n<p><em><code class=\"language-text\">Support Vector Machines (SVM)</code></em></p>\n<ul>\n<li><em>Real World Application</em>: <a href=\"http://aclweb.org/anthology/U12-1016\">Using SVM for natural language processing to find out the study region in environmental science</a></li>\n<li><em>Strengths of the model</em>:</li>\n<li>Effective in high dimensional spaces so can model non linear decision boundaries.</li>\n<li>Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient.</li>\n<li>Different Kernel functions can be specified for the decision function. Common kernels are provided, but it is also possible to specify custom kernels.</li>\n<li><em>Weakness of the model</em>:</li>\n<li>SVN works by creating hyper planes on n-dimensional feature space, so for larger feature set training SVM can be time consuming if the dataset is big.</li>\n<li>Overfit problem can occur when the data is too noisy</li>\n<li>If the number of features is much greater than the number of samples it may suffer from overfitting if the kernel is not choosen properly. So choosing the kernel is bit essential. </li>\n<li><em>Why use</em>:</li>\n<li>SVM works effectively in the binary classification that we are having here. Apart from that from the pair plots plotted. I do not see a very clear 2-dimensional distinction descision surface. This will be helpful as it operates on hyperplanes to work with data. Here the other task is to find a best possible boundary, SVM can be useful as its built on large margin classification. This will effectively help classify the margins in a better way.</li>\n</ul>\n<p><em><code class=\"language-text\">Gradient Boosting</code></em></p>\n<ul>\n<li><em>Real World Application</em>: <a href=\"https://www.psiweb.org/docs/default-source/default-document-library/guiyuan-lei-slides.pdf?sfvrsn=2526dedb_0\">Predict survival for cancer patient</a></li>\n<li><em>Strengths of the model</em>:</li>\n<li>Good on large data sets. Good choice to reduce bias and variance.</li>\n<li>Good for both linear and non linear data set.</li>\n<li>Good for both regression and classification tasks.</li>\n<li>New predictors learn from mistakes committed by previous predictors, so it takes less time/iterations to reach close to actual predictions.</li>\n<li><em>Weakness of the model</em>:</li>\n<li>Very sensitive to feature set and training set.</li>\n<li>Predictions are not easy to understand. This may affect the chance that it will be tuned right in the first shot. May need better understanding.</li>\n<li>If stopping crieteria is not choosen properly can lead to overfitting.</li>\n<li><em>Why use</em>:</li>\n<li>The data we have may not be necessarily linear so gradient boosting can be applied here as it works with both kind of data. The data set looks to have some class imbalance and a ensemble method like Gradient boosting can help achieve a better prediction model.</li>\n</ul>\n<h3>Implementation - Creating a Training and Predicting Pipeline</h3>\n<p>To properly evaluate the performance of each model you've chosen, it's important that you create a training and predicting pipeline that allows you to quickly and effectively train models using various sizes of training data and perform predictions on the testing data. Your implementation here will be used in the following section.\nIn the code block below, you will need to implement the following:</p>\n<ul>\n<li>Import <code class=\"language-text\">fbeta_score</code> and <code class=\"language-text\">accuracy_score</code> from <a href=\"http://scikit-learn.org/stable/modules/classes.html#sklearn-metrics-metrics\"><code class=\"language-text\">sklearn.metrics</code></a>.</li>\n<li>Fit the learner to the sampled training data and record the training time.</li>\n<li>\n<p>Perform predictions on the test data <code class=\"language-text\">X_test</code>, and also on the first 300 training points <code class=\"language-text\">X_train[:300]</code>.</p>\n<ul>\n<li>Record the total prediction time.</li>\n</ul>\n</li>\n<li>Calculate the accuracy score for both the training subset and testing set.</li>\n<li>\n<p>Calculate the F-score for both the training subset and testing set.</p>\n<ul>\n<li>Make sure that you set the <code class=\"language-text\">beta</code> parameter!</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># TODO: Import two metrics from sklearn - fbeta_score and accuracy_score</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train_predict</span><span class=\"token punctuation\">(</span>learner<span class=\"token punctuation\">,</span> sample_size<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token triple-quoted-string string\">'''\n    inputs:\n       - learner: the learning algorithm to be trained and predicted on\n       - sample_size: the size of samples (number) to be drawn from training set\n       - X_train: features training set\n       - y_train: income training set\n       - X_test: features testing set\n       - y_test: income testing set\n    '''</span>\n    \n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\"># TODO: Fit the learner to the training data using slicing with 'sample_size' using .fit(training_features[:], training_labels[:])</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Get start time</span>\n    learner <span class=\"token operator\">=</span> learner<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>sample_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>sample_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Get end time</span>\n    \n    <span class=\"token comment\"># TODO: Calculate the training time</span>\n    results<span class=\"token punctuation\">[</span><span class=\"token string\">'train_time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start\n        \n    <span class=\"token comment\"># TODO: Get the predictions on the test set(X_test),</span>\n    <span class=\"token comment\">#       then get predictions on the first 300 training samples(X_train) using .predict()</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Get start time</span>\n    predictions_test <span class=\"token operator\">=</span> learner<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n    predictions_train <span class=\"token operator\">=</span> learner<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Get end time</span>\n    \n    <span class=\"token comment\"># TODO: Calculate the total prediction time</span>\n    results<span class=\"token punctuation\">[</span><span class=\"token string\">'pred_time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start\n            \n    <span class=\"token comment\"># TODO: Compute accuracy on the first 300 training samples which is y_train[:300]</span>\n    results<span class=\"token punctuation\">[</span><span class=\"token string\">'acc_train'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> accuracy_score<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> predictions_train<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\"># TODO: Compute accuracy on test set using accuracy_score()</span>\n    results<span class=\"token punctuation\">[</span><span class=\"token string\">'acc_test'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> accuracy_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> predictions_test<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># TODO: Compute F-score on the the first 300 training samples using fbeta_score()</span>\n    beta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n    results<span class=\"token punctuation\">[</span><span class=\"token string\">'f_train'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fbeta_score<span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> predictions_train<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> beta<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\"># TODO: Compute F-score on the test set which is y_test</span>\n    results<span class=\"token punctuation\">[</span><span class=\"token string\">'f_test'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fbeta_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> predictions_test<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> beta<span class=\"token punctuation\">)</span>\n       \n    <span class=\"token comment\"># Success</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} trained on {} samples.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>learner<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span> sample_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\"># Return the results</span>\n    <span class=\"token keyword\">return</span> results</code></pre></div>\n<h3>Implementation: Initial Model Evaluation</h3>\n<p>In the code cell, you will need to implement the following:</p>\n<ul>\n<li>Import the three supervised learning models you've discussed in the previous section.</li>\n<li>\n<p>Initialize the three models and store them in <code class=\"language-text\">&#39;clf_A&#39;</code>, <code class=\"language-text\">&#39;clf_B&#39;</code>, and <code class=\"language-text\">&#39;clf_C&#39;</code>.</p>\n<ul>\n<li>Use a <code class=\"language-text\">&#39;random_state&#39;</code> for each model you use, if provided.</li>\n<li><strong>Note:</strong> Use the default settings for each model — you will tune one specific model in a later section.</li>\n</ul>\n</li>\n<li>\n<p>Calculate the number of records equal to 1%, 10%, and 100% of the training data.</p>\n<ul>\n<li>Store those values in <code class=\"language-text\">&#39;samples_1&#39;</code>, <code class=\"language-text\">&#39;samples_10&#39;</code>, and <code class=\"language-text\">&#39;samples_100&#39;</code> respectively.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Note:</strong> Depending on which algorithms you chose, the following implementation may take some time to run!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># TODO: Import the three supervised learning models from sklearn</span>\nnp<span class=\"token punctuation\">.</span>warnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LogisticRegression\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> GradientBoostingClassifier\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>svm <span class=\"token keyword\">import</span> SVC\n<span class=\"token comment\"># TODO: Initialize the three models</span>\nrandom_state <span class=\"token operator\">=</span> <span class=\"token number\">43</span>\n<span class=\"token comment\"># Logistic Regression</span>\nclf_A <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span>random_state<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Support Vector Machines (SVM)</span>\nclf_B <span class=\"token operator\">=</span> SVC<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span>random_state<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Gradient Boosting</span>\nclf_C <span class=\"token operator\">=</span> GradientBoostingClassifier<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span>random_state<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Calculate the number of samples for 1%, 10%, and 100% of the training data</span>\n<span class=\"token comment\"># HINT: samples_100 is the entire training set i.e. len(y_train)</span>\n<span class=\"token comment\"># HINT: samples_10 is 10% of samples_100 (ensure to set the count of the values to be `int` and not `float`)</span>\n<span class=\"token comment\"># HINT: samples_1 is 1% of samples_100 (ensure to set the count of the values to be `int` and not `float`)</span>\nsamples_100 <span class=\"token operator\">=</span> y_train<span class=\"token punctuation\">.</span>size\nsamples_10 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>samples_100<span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsamples_1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span>samples_100<span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Collect results on the learners</span>\n<span class=\"token comment\"># results = {}</span>\n<span class=\"token comment\"># model_set = [clf_A, clf_B, clf_C]</span>\n<span class=\"token comment\"># model_set = [clf_A, clf_C]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc_result_of_learner</span><span class=\"token punctuation\">(</span>model_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> clf <span class=\"token keyword\">in</span> model_set<span class=\"token punctuation\">:</span>\n        clf_name <span class=\"token operator\">=</span> clf<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__\n        results<span class=\"token punctuation\">[</span>clf_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> samples <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>samples_1<span class=\"token punctuation\">,</span> samples_10<span class=\"token punctuation\">,</span> samples_100<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            results<span class=\"token punctuation\">[</span>clf_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \\\n            train_predict<span class=\"token punctuation\">(</span>clf<span class=\"token punctuation\">,</span> samples<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_learner_results_in_table</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> accuracy<span class=\"token punctuation\">,</span> fscore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> res <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        display_html<span class=\"token punctuation\">(</span>display_string<span class=\"token operator\">=</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> heading_value<span class=\"token operator\">=</span><span class=\"token string\">'h5'</span><span class=\"token punctuation\">)</span>\n        display<span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token string\">'1%'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string\">'10%'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">'100%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    vs<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> accuracy<span class=\"token punctuation\">,</span> fscore<span class=\"token punctuation\">)</span>\n        \n<span class=\"token comment\"># Run metrics visualization for the three supervised learning models chosen</span>\ndisplay_html<span class=\"token punctuation\">(</span><span class=\"token string\">\"Run metrics visualization for the three supervised learning models chosen (With SVM):\"</span><span class=\"token punctuation\">)</span>\nmodel_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>clf_A<span class=\"token punctuation\">,</span> clf_B<span class=\"token punctuation\">,</span> clf_C<span class=\"token punctuation\">]</span>\nresults <span class=\"token operator\">=</span> calc_result_of_learner<span class=\"token punctuation\">(</span>model_set<span class=\"token operator\">=</span>model_set<span class=\"token punctuation\">)</span>\nprint_learner_results_in_table<span class=\"token punctuation\">(</span>results<span class=\"token operator\">=</span>results<span class=\"token punctuation\">,</span> accuracy<span class=\"token operator\">=</span>accuracy<span class=\"token punctuation\">,</span> fscore<span class=\"token operator\">=</span>fscore<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># vs.evaluate(results, accuracy, fscore)</span>\ndisplay_html<span class=\"token punctuation\">(</span><span class=\"token string\">\"Run metrics visualization for the three supervised learning models chosen (Without SVM):\"</span><span class=\"token punctuation\">)</span>\nmodel_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>clf_A<span class=\"token punctuation\">,</span> clf_C<span class=\"token punctuation\">]</span>\nresults <span class=\"token operator\">=</span> calc_result_of_learner<span class=\"token punctuation\">(</span>model_set<span class=\"token operator\">=</span>model_set<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># vs.evaluate(results, accuracy, fscore)</span>\nprint_learner_results_in_table<span class=\"token punctuation\">(</span>results<span class=\"token operator\">=</span>results<span class=\"token punctuation\">,</span> accuracy<span class=\"token operator\">=</span>accuracy<span class=\"token punctuation\">,</span> fscore<span class=\"token operator\">=</span>fscore<span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color:blue\"><h4>Run metrics visualization for the three supervised learning models chosen (With SVM):</h4> </span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">LogisticRegression trained on 361 samples.\nLogisticRegression trained on 3617 samples.\nLogisticRegression trained on 36177 samples.\nSVC trained on 361 samples.\nSVC trained on 3617 samples.\nSVC trained on 36177 samples.\nGradientBoostingClassifier trained on 361 samples.\nGradientBoostingClassifier trained on 3617 samples.\nGradientBoostingClassifier trained on 36177 samples.</code></pre></div>\n<p><span style=\"color:blue\"><h5>LogisticRegression</h5> </span>  </p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1%</th>\n      <th>10%</th>\n      <th>100%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>acc_test</th>\n      <td>0.823991</td>\n      <td>0.841570</td>\n      <td>0.843118</td>\n    </tr>\n    <tr>\n      <th>acc_train</th>\n      <td>0.860000</td>\n      <td>0.850000</td>\n      <td>0.830000</td>\n    </tr>\n    <tr>\n      <th>f_test</th>\n      <td>0.638170</td>\n      <td>0.680017</td>\n      <td>0.682812</td>\n    </tr>\n    <tr>\n      <th>f_train</th>\n      <td>0.727273</td>\n      <td>0.691318</td>\n      <td>0.642202</td>\n    </tr>\n    <tr>\n      <th>pred_time</th>\n      <td>0.007558</td>\n      <td>0.004691</td>\n      <td>0.002988</td>\n    </tr>\n    <tr>\n      <th>train_time</th>\n      <td>0.003045</td>\n      <td>0.019732</td>\n      <td>0.246644</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><span style=\"color:blue\"><h5>SVC</h5> </span>  </p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1%</th>\n      <th>10%</th>\n      <th>100%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>acc_test</th>\n      <td>0.758872</td>\n      <td>0.834052</td>\n      <td>0.841791</td>\n    </tr>\n    <tr>\n      <th>acc_train</th>\n      <td>0.763333</td>\n      <td>0.850000</td>\n      <td>0.840000</td>\n    </tr>\n    <tr>\n      <th>f_test</th>\n      <td>0.000000</td>\n      <td>0.668927</td>\n      <td>0.682872</td>\n    </tr>\n    <tr>\n      <th>f_train</th>\n      <td>0.000000</td>\n      <td>0.703422</td>\n      <td>0.670103</td>\n    </tr>\n    <tr>\n      <th>pred_time</th>\n      <td>0.207695</td>\n      <td>1.739599</td>\n      <td>14.293886</td>\n    </tr>\n    <tr>\n      <th>train_time</th>\n      <td>0.009839</td>\n      <td>0.833704</td>\n      <td>89.733363</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><span style=\"color:blue\"><h5>GradientBoostingClassifier</h5> </span>  </p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1%</th>\n      <th>10%</th>\n      <th>100%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>acc_test</th>\n      <td>0.830735</td>\n      <td>0.863460</td>\n      <td>0.864787</td>\n    </tr>\n    <tr>\n      <th>acc_train</th>\n      <td>0.966667</td>\n      <td>0.890000</td>\n      <td>0.876667</td>\n    </tr>\n    <tr>\n      <th>f_test</th>\n      <td>0.652447</td>\n      <td>0.735864</td>\n      <td>0.738580</td>\n    </tr>\n    <tr>\n      <th>f_train</th>\n      <td>0.929577</td>\n      <td>0.787781</td>\n      <td>0.759076</td>\n    </tr>\n    <tr>\n      <th>pred_time</th>\n      <td>0.018142</td>\n      <td>0.016104</td>\n      <td>0.019581</td>\n    </tr>\n    <tr>\n      <th>train_time</th>\n      <td>0.077291</td>\n      <td>0.644665</td>\n      <td>7.494051</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><img src=\"output_34_8.png\" alt=\"png\"></p>\n<p><span style=\"color:blue\"><h4>Run metrics visualization for the three supervised learning models chosen (Without SVM):</h4> </span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">LogisticRegression trained on 361 samples.\nLogisticRegression trained on 3617 samples.\nLogisticRegression trained on 36177 samples.\nGradientBoostingClassifier trained on 361 samples.\nGradientBoostingClassifier trained on 3617 samples.\nGradientBoostingClassifier trained on 36177 samples.</code></pre></div>\n<p><span style=\"color:blue\"><h5>LogisticRegression</h5> </span>  </p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1%</th>\n      <th>10%</th>\n      <th>100%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>acc_test</th>\n      <td>0.823991</td>\n      <td>0.841570</td>\n      <td>0.843118</td>\n    </tr>\n    <tr>\n      <th>acc_train</th>\n      <td>0.860000</td>\n      <td>0.850000</td>\n      <td>0.830000</td>\n    </tr>\n    <tr>\n      <th>f_test</th>\n      <td>0.638170</td>\n      <td>0.680017</td>\n      <td>0.682812</td>\n    </tr>\n    <tr>\n      <th>f_train</th>\n      <td>0.727273</td>\n      <td>0.691318</td>\n      <td>0.642202</td>\n    </tr>\n    <tr>\n      <th>pred_time</th>\n      <td>0.004381</td>\n      <td>0.004233</td>\n      <td>0.003947</td>\n    </tr>\n    <tr>\n      <th>train_time</th>\n      <td>0.002694</td>\n      <td>0.017182</td>\n      <td>0.212742</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><span style=\"color:blue\"><h5>GradientBoostingClassifier</h5> </span>  </p>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1%</th>\n      <th>10%</th>\n      <th>100%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>acc_test</th>\n      <td>0.830735</td>\n      <td>0.863460</td>\n      <td>0.864787</td>\n    </tr>\n    <tr>\n      <th>acc_train</th>\n      <td>0.966667</td>\n      <td>0.890000</td>\n      <td>0.876667</td>\n    </tr>\n    <tr>\n      <th>f_test</th>\n      <td>0.652447</td>\n      <td>0.735864</td>\n      <td>0.738580</td>\n    </tr>\n    <tr>\n      <th>f_train</th>\n      <td>0.929577</td>\n      <td>0.787781</td>\n      <td>0.759076</td>\n    </tr>\n    <tr>\n      <th>pred_time</th>\n      <td>0.021167</td>\n      <td>0.016140</td>\n      <td>0.023832</td>\n    </tr>\n    <tr>\n      <th>train_time</th>\n      <td>0.082876</td>\n      <td>0.605710</td>\n      <td>7.868132</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p><img src=\"output_34_15.png\" alt=\"png\"></p>\n<hr>\n<h2>Improving Results</h2>\n<p>In this final section, you will choose from the three supervised learning models the <em>best</em> model to use on the student data. You will then perform a grid search optimization for the model over the entire training set (<code class=\"language-text\">X_train</code> and <code class=\"language-text\">y_train</code>) by tuning at least one parameter to improve upon the untuned model's F-score. </p>\n<h3>Question 3 - Choosing the Best Model</h3>\n<ul>\n<li>Based on the evaluation you performed earlier, in one to two paragraphs, explain to <em>CharityML</em> which of the three models you believe to be most appropriate for the task of identifying individuals that make more than $50,000. </li>\n</ul>\n<p><strong>HINT:</strong>\nLook at the graph at the bottom left from the cell above(the visualization created by <code class=\"language-text\">vs.evaluate(results, accuracy, fscore)</code>) and check the F score for the testing set when 100% of the training set is used. Which model has the highest score? Your answer should include discussion of the:</p>\n<ul>\n<li>metrics - F score on the testing when 100% of the training data is used, </li>\n<li>prediction/training time</li>\n<li>the algorithm's suitability for the data.</li>\n</ul>\n<p><strong>Answer:</strong></p>\n<ul>\n<li>Of the 3 models tested the <code class=\"language-text\">Gradient Boosting Classifier</code> performed the best. It has scored better in both the testing and training sets. Though its F-Score and accuracy score is nearly same as the other 3 its still on the higher side for both the testing and training data. This means it is a proper balance of prescision (The number of relevent items) and recall (How many relevent items are selected)</li>\n<li>The time taken by the SVM is quite high than the other 3. We can obsereve it by the second set of graph where we are discarding it. Though it takes a significant amout of time more, the accuracy and F-Score on both test and train data are less. So we will be discarding it. Now in Logistic Regression Vs Gradient Boosting; the accuracy and F-Score of the <code class=\"language-text\">Gradient Boosting</code> is bit more for both test and training data. So we can choose it. Apart from that if we see the timing, we can see that with the % increase in samples the time taken to training time for the gradient boosting is quite more, but for the testing set, though with % increase the time to predict for the Logistic regression increases, the time for Gradient Boosting is nearly same. This may be true if the data size increase further.</li>\n<li>We will be using <code class=\"language-text\">Gradient Boosting</code> for further analysis. The algorithm scored better with the default parameters. So improving the hyper parameter tuning may possible give a better predction. Apart from that it is fast to work on.</li>\n</ul>\n<h3>Question 4 - Describing the Model in Layman's Terms</h3>\n<ul>\n<li>In one to two paragraphs, explain to <em>CharityML</em>, in layman's terms, how the final model chosen is supposed to work. Be sure that you are describing the major qualities of the model, such as how the model is trained and how the model makes a prediction. Avoid using advanced mathematical jargon, such as describing equations.</li>\n</ul>\n<p><strong>HINT:</strong></p>\n<p>When explaining your model, if using external resources please include all citations.</p>\n<p><strong>Answer:</strong>\nThe algorith we will be using here is summarised:</p>\n<ol>\n<li>It first models the data with a simpler model (weak model). Because the model is simple it will not be a good fit to generate errors. Now it focuses on that error.</li>\n<li>Now it uses a different model (predictor) to fix this hard to fit data (error data) and get them right.</li>\n<li>The above 2 steps are repeated for some time with different predictors so that we have have better results gradually.</li>\n<li>At the end we combine the predictors in some way to get better results.</li>\n</ol>\n<p>For a simple example lets think we have the task to grade a students paper (lets say math combination of calculus, stats and algebra) and instead of getting expert in the field we stick with some people who are not that exprt but can look at a gradient rubic we are giving them and grade. So the assumption is that individually they will not be doing justice in grading as they will work mostly mechanically. So we follow this to train them:</p>\n<ol>\n<li>Ask one person to grade with the rubic and we verify the result, point out the errors in the grading process. These errors were due to the fact that this person is good in understanding certain question (lets say calculus) and grading well and not good in grading other questions (algebra and stats).</li>\n<li>Now we assign the 2nd person with grading the questions where the 1st persion failed and so on repeat the process till we are satisfied.</li>\n<li>After that we average the results using some method.</li>\n</ol>\n<p>This is the gist of the ensemble method like gradient boosting.</p>\n<p>Applying the similar example to the problem at hand we have the following solution using gradient boosting:\nHere the first simple solution can be lets say all of them have more than 50K salary as we did in the naive method eariler. This may not be accurate as its not a very good prediction but a weak one. The algorithm will check how good it has done, what is the residual (How much it is deviating from the actual results). For next step it will figure out which variable is causing more trouble and then it will use a descision tree to get a better catagorization on that variable. This process is repeated till the satisfied results are reached.</p>\n<p>Gradient boosting has benefits for our approach as we have observed that the time taken to train and predict by this mode is really good and also the end results that is given by the F-Score is also good.</p>\n<h3>Implementation: Model Tuning</h3>\n<p>Fine tune the chosen model. Use grid search (<code class=\"language-text\">GridSearchCV</code>) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. In the code cell below, you will need to implement the following:</p>\n<ul>\n<li>Import <a href=\"http://scikit-learn.org/0.17/modules/generated/sklearn.grid_search.GridSearchCV.html\"><code class=\"language-text\">sklearn.grid_search.GridSearchCV</code></a> and <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html\"><code class=\"language-text\">sklearn.metrics.make_scorer</code></a>.</li>\n<li>Initialize the classifier you've chosen and store it in <code class=\"language-text\">clf</code>.</li>\n<li>Set a <code class=\"language-text\">random_state</code> if one is available to the same state you set before.</li>\n<li>Create a dictionary of parameters you wish to tune for the chosen model.</li>\n<li>Example: <code class=\"language-text\">parameters = {&#39;parameter&#39; : [list of values]}</code>.</li>\n<li><strong>Note:</strong> Avoid tuning the <code class=\"language-text\">max_features</code> parameter of your learner if that parameter is available!</li>\n<li>Use <code class=\"language-text\">make_scorer</code> to create an <code class=\"language-text\">fbeta_score</code> scoring object (with $\\beta = 0.5$).</li>\n<li>Perform grid search on the classifier <code class=\"language-text\">clf</code> using the <code class=\"language-text\">&#39;scorer&#39;</code>, and store it in <code class=\"language-text\">grid_obj</code>.</li>\n<li>Fit the grid search object to the training data (<code class=\"language-text\">X_train</code>, <code class=\"language-text\">y_train</code>), and store it in <code class=\"language-text\">grid_fit</code>.</li>\n</ul>\n<p><strong>Note:</strong> Depending on the algorithm chosen and the parameter list, the following implementation may take some time to run!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># TODO: Import 'GridSearchCV', 'make_scorer', and any other necessary libraries</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> GridSearchCV\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> make_scorer\n\n<span class=\"token comment\"># TODO: Initialize the classifier</span>\nclf <span class=\"token operator\">=</span> GradientBoostingClassifier<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span>random_state<span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Create the parameters list you wish to tune, using a dictionary if needed.</span>\n<span class=\"token comment\"># HINT: parameters = {'parameter_1': [value1, value2], 'parameter_2': [value1, value2]}</span>\n<span class=\"token comment\"># 3 is the default one. So I am starting from 3</span>\n<span class=\"token comment\"># n_estimators starts with 100</span>\n<span class=\"token comment\"># parameters = {'max_depth':[3,4,5,6,7],</span>\n<span class=\"token comment\">#              'loss':['deviance', 'exponential'],</span>\n<span class=\"token comment\">#              'n_estimators':[100, 150, 300, 600],</span>\n<span class=\"token comment\">#              'learning_rate': [0.1, 0.5, 1.0],</span>\n<span class=\"token comment\">#              'warm_start': [True, False]}</span>\n\n<span class=\"token comment\"># parameters = {'max_depth':[3,4,5,6,7],</span>\n<span class=\"token comment\">#              'loss':['deviance', 'exponential'],</span>\n<span class=\"token comment\">#              'n_estimators':[100, 150, 300, 600]}</span>\n\n<span class=\"token comment\"># parameters = {'max_depth':[3,4,5,6,7],</span>\n<span class=\"token comment\">#              'loss':['deviance', 'exponential'],</span>\n<span class=\"token comment\">#              'n_estimators':[100, 150, 300, 600],</span>\n<span class=\"token comment\">#              'learning_rate': [0.1, 0.5, 1.0]}</span>\n\nparameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'max_depth'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'loss'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'deviance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exponential'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># TODO: Make an fbeta_score scoring object using make_scorer()</span>\nscorer <span class=\"token operator\">=</span> make_scorer<span class=\"token punctuation\">(</span>fbeta_score<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO: Perform grid search on the classifier using 'scorer' as the scoring method using GridSearchCV()</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ngrid_obj <span class=\"token operator\">=</span> GridSearchCV<span class=\"token punctuation\">(</span>estimator <span class=\"token operator\">=</span> clf<span class=\"token punctuation\">,</span> param_grid <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">,</span> scoring <span class=\"token operator\">=</span> scorer<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># TODO: Fit the grid search object to the training data and find the optimal parameters using fit()</span>\ngrid_fit <span class=\"token operator\">=</span> grid_obj<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Get the estimator</span>\nbest_clf <span class=\"token operator\">=</span> grid_fit<span class=\"token punctuation\">.</span>best_estimator_\n\n<span class=\"token comment\"># Make predictions using the unoptimized and model</span>\npredictions <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>clf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># best_predictions = best_clf.predict(X_test)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbest_predictions <span class=\"token operator\">=</span> best_clf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time taken to predict: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Time taken to predict: 0.03802013397216797</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Report the before-and-afterscores</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unoptimized model\\n------\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy score on testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F-score on testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>fbeta_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nOptimized Model\\n------\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Final accuracy score on the testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> best_predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Final F-score on the testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>fbeta_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> best_predictions<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time taken for grid search: {}s'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndisplay<span class=\"token punctuation\">(</span>best_clf<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Unoptimized model\n------\nAccuracy score on testing data: 0.8648\nF-score on testing data: 0.7386\n\nOptimized Model\n------\nFinal accuracy score on the testing data: 0.8724\nFinal F-score on the testing data: 0.7527\nTime taken for grid search: 0.03802013397216797s\n\n\n\nGradientBoostingClassifier(criterion=&#39;friedman_mse&#39;, init=None,\n              learning_rate=0.1, loss=&#39;deviance&#39;, max_depth=5,\n              max_features=None, max_leaf_nodes=None,\n              min_impurity_decrease=0.0, min_impurity_split=None,\n              min_samples_leaf=1, min_samples_split=2,\n              min_weight_fraction_leaf=0.0, n_estimators=100,\n              n_iter_no_change=None, presort=&#39;auto&#39;, random_state=43,\n              subsample=1.0, tol=0.0001, validation_fraction=0.1,\n              verbose=0, warm_start=False)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\nconf_mat <span class=\"token operator\">=</span> confusion_matrix<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> best_predictions<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># normalize the data</span>\nconf_mat <span class=\"token operator\">=</span> conf_mat<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> conf_mat<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\ndisplay<span class=\"token punctuation\">(</span>conf_mat<span class=\"token punctuation\">)</span>\nsns<span class=\"token punctuation\">.</span>heatmap<span class=\"token punctuation\">(</span>conf_mat<span class=\"token punctuation\">,</span> annot<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> annot_kws<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'plasma_r'</span><span class=\"token punctuation\">,</span> square<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Confusion matrix for:\\n{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>best_clf<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'True'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Predicted'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">array([[0.94274476, 0.05725524],\n       [0.34892251, 0.65107749]])\n\n\n\n\n\nText(0.5, 12.5, &#39;Predicted&#39;)</code></pre></div>\n<p><img src=\"output_44_2.png\" alt=\"png\"></p>\n<h3>Question 5 - Final Model Evaluation</h3>\n<ul>\n<li>What is your optimized model's accuracy and F-score on the testing data? </li>\n<li>Are these scores better or worse than the unoptimized model? </li>\n<li>How do the results from your optimized model compare to the naive predictor benchmarks you found earlier in <strong>Question 1</strong>?_  </li>\n</ul>\n<p><strong>Note:</strong> Fill in the table below with your results, and then provide discussion in the <strong>Answer</strong> box.</p>\n<h4>Results:</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Metric</th>\n<th align=\"center\">Unoptimized Model</th>\n<th align=\"center\">Optimized Model</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Accuracy Score</td>\n<td align=\"center\">0.8648</td>\n<td align=\"center\">0.8724</td>\n</tr>\n<tr>\n<td align=\"center\">F-score</td>\n<td align=\"center\">0.7386</td>\n<td align=\"center\">0.7527</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Answer:</strong></p>\n<ul>\n<li>Accuracy of optimized model is 0.8724 and F-Score is 0.7527</li>\n<li>Thse score are nearly same as the un-optimized score. Just a little bit better.</li>\n<li>These scores are way above the score of the naive predictor in Question 1. There the Accuracy score: 0.2478, F-score: 0.2917.</li>\n</ul>\n<hr>\n<h2>Feature Importance</h2>\n<p>An important task when performing supervised learning on a dataset like the census data we study here is determining which features provide the most predictive power. By focusing on the relationship between only a few crucial features and the target label we simplify our understanding of the phenomenon, which is most always a useful thing to do. In the case of this project, that means we wish to identify a small number of features that most strongly predict whether an individual makes at most or more than $50,000.</p>\n<p>Choose a scikit-learn classifier (e.g., adaboost, random forests) that has a <code class=\"language-text\">feature_importance_</code> attribute, which is a function that ranks the importance of features according to the chosen classifier.  In the next python cell fit this classifier to training set and use this attribute to determine the top 5 most important features for the census dataset.</p>\n<h3>Question 6 - Feature Relevance Observation</h3>\n<p>When <strong>Exploring the Data</strong>, it was shown there are thirteen available features for each individual on record in the census data. Of these thirteen records, which five features do you believe to be most important for prediction, and in what order would you rank them and why?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Just to reiterate the features</span>\ndisplay<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Index([&#39;age&#39;, &#39;workclass&#39;, &#39;education_level&#39;, &#39;education-num&#39;,\n       &#39;marital-status&#39;, &#39;occupation&#39;, &#39;relationship&#39;, &#39;race&#39;, &#39;sex&#39;,\n       &#39;capital-gain&#39;, &#39;capital-loss&#39;, &#39;hours-per-week&#39;, &#39;native-country&#39;,\n       &#39;income&#39;],\n      dtype=&#39;object&#39;)</code></pre></div>\n<p><strong>Answer:</strong></p>\n<p>Following are the 5 features I believe are important from personal experience:</p>\n<ul>\n<li><code class=\"language-text\">education_level</code>: Gets the level of education. This is important for the earning.</li>\n<li><code class=\"language-text\">occupation</code> : The occupation also matter. Some occupations have better pay and some do not. Regardless of education this can be an variable that influences.</li>\n<li><code class=\"language-text\">capital-gain</code>: Regardless of the above 2 the captail gain will determine if the person can pay for charity. If this is not there we cant expect much.</li>\n<li><code class=\"language-text\">captail-loss</code>: Same as above. This also influence the capability to pay.</li>\n<li><code class=\"language-text\">age</code>: I guess age plays a role to tell in what kind of position the person is financially.</li>\n</ul>\n<h3>Implementation - Extracting Feature Importance</h3>\n<p>Choose a <code class=\"language-text\">scikit-learn</code> supervised learning algorithm that has a <code class=\"language-text\">feature_importance_</code> attribute availble for it. This attribute is a function that ranks the importance of each feature when making predictions based on the chosen algorithm.</p>\n<p>In the code cell below, you will need to implement the following:</p>\n<ul>\n<li>Import a supervised learning model from sklearn if it is different from the three used earlier.</li>\n<li>Train the supervised model on the entire training set.</li>\n<li>Extract the feature importances using <code class=\"language-text\">&#39;.feature_importances_&#39;</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># TODO: Import a supervised learning model that has 'feature_importances_'</span>\n\n<span class=\"token comment\"># Fortunately the GraientBoosting has feature_importances_</span>\n<span class=\"token comment\"># TODO: Train the supervised model on the training set using .fit(X_train, y_train)</span>\nmodel <span class=\"token operator\">=</span> best_clf\n\n<span class=\"token comment\"># TODO: Extract the feature importances using .feature_importances_ </span>\nimportances <span class=\"token operator\">=</span> best_clf<span class=\"token punctuation\">.</span>feature_importances_\n\n<span class=\"token comment\"># Plot</span>\nvs<span class=\"token punctuation\">.</span>feature_plot<span class=\"token punctuation\">(</span>importances<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"output_53_0.png\" alt=\"png\"></p>\n<h3>Question 7 - Extracting Feature Importance</h3>\n<p>Observe the visualization created above which displays the five most relevant features for predicting if an individual makes at most or above $50,000.  </p>\n<ul>\n<li>How do these five features compare to the five features you discussed in <strong>Question 6</strong>?</li>\n<li>If you were close to the same answer, how does this visualization confirm your thoughts? </li>\n<li>If you were not close, why do you think these features are more relevant?</li>\n</ul>\n<p><strong>Answer:</strong></p>\n<p>I was not expecting the <code class=\"language-text\">martial-status</code> to impact the individuals ability to earn. But from data it looks like it makes difference. The rest of the features are as I expected.</p>\n<h3>Feature Selection</h3>\n<p>How does a model perform if we only use a subset of all the available features in the data? With less features required to train, the expectation is that training and prediction time is much lower — at the cost of performance metrics. From the visualization above, we see that the top five most important features contribute more than half of the importance of <strong>all</strong> features present in the data. This hints that we can attempt to <em>reduce the feature space</em> and simplify the information required for the model to learn. The code cell below will use the same optimized model you found earlier, and train it on the same training set <em>with only the top five important features</em>. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Import functionality for cloning a model</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>base <span class=\"token keyword\">import</span> clone\n\n<span class=\"token comment\"># Reduce the feature space</span>\nX_train_reduced <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">[</span>X_train<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>importances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nX_test_reduced <span class=\"token operator\">=</span> X_test<span class=\"token punctuation\">[</span>X_test<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>importances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Train on the \"best\" model found from grid search earlier</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">(</span>best_clf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train_reduced<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time taken for training: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Make new predictions</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nreduced_predictions <span class=\"token operator\">=</span> clf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test_reduced<span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time taken for predicting: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Report scores from the final model using both versions of data</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Final Model trained on full data\\n------\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy on testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> best_predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F-score on testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>fbeta_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> best_predictions<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nFinal Model trained on reduced data\\n------\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy on testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>accuracy_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> reduced_predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F-score on testing data: {:.4f}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>fbeta_score<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> reduced_predictions<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time taken for \"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Time taken for training: 1.6157686710357666\nTime taken for predicting: 0.01609182357788086\nFinal Model trained on full data\n------\nAccuracy on testing data: 0.8724\nF-score on testing data: 0.7527\n\nFinal Model trained on reduced data\n------\nAccuracy on testing data: 0.8627\nF-score on testing data: 0.7347\nTime taken for </code></pre></div>\n<h3>Question 8 - Effects of Feature Selection</h3>\n<ul>\n<li>How does the final model's F-score and accuracy score on the reduced data using only five features compare to those same scores when all features are used?</li>\n<li>If training time was a factor, would you consider using the reduced data as your training set?</li>\n</ul>\n<p><strong>Answer:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Metric</th>\n<th align=\"center\">Optimized Model</th>\n<th align=\"center\">Feature Reduced Model</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Accuracy Score</td>\n<td align=\"center\">0.8724</td>\n<td align=\"center\">0.8627</td>\n</tr>\n<tr>\n<td align=\"center\">F-score</td>\n<td align=\"center\">0.7527</td>\n<td align=\"center\">0.7347</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Checking the table we can see that the accuracy is not much changing with reduced feature model.</li>\n<li>The time taken for prediction changed from 0.03 to 0.015. This will be very useful when we have a lot more data and more feature to choose from.</li>\n<li>From doing the gridsearch and prediction in this exercise which almost melted my laptop, I believe only keeping the most essential features makes more sense when we are computing in constrained environment.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to<br>\n<strong>File -> Download as -> HTML (.html)</strong>. Include the finished document along with this notebook as your submission.</p>\n</blockquote>\n<p><strong>Reference</strong></p>\n<ul>\n<li><a href=\"https://www.r-statistics.com/2013/05/log-transformations-for-skewed-and-wide-distributions-from-practical-data-science-with-r/\">Log Transformations for Skewed and Wide Distributions</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Data_transformation_(statistics)\">Data Transformations</a></li>\n<li><a href=\"https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/\">Few types of Regression</a></li>\n<li><a href=\"http://ucanalytics.com/blogs/marketing-analytics-retail-case-study-part-1/\">Marketing Analytics example</a></li>\n<li><a href=\"https://dzone.com/articles/decision-trees-vs-clustering-algorithms-vs-linear\">Decision-trees vs clustering-algorithms vs linear regression</a></li>\n<li><a href=\"https://www.analyticsinsight.net/introduction-to-logistic-regression/\">Introduction to logistic Regression</a></li>\n<li><a href=\"https://ayearofai.com/rohan-1-when-would-i-even-use-a-quadratic-equation-in-the-real-world-13f379edab3b\">Cancer detection using logistic regression</a></li>\n<li><a href=\"https://www.amazon.in/Machine-Learning-Action-Peter-Harrington/dp/1617290181\">Machine Learning in Action</a></li>\n<li><a href=\"http://theses.gla.ac.uk/4624/56/2013reardonphd.pdf\">Investigation of risk factors associated with injuries to horses undertaking jump racing in Great Britain</a></li>\n<li><a href=\"https://pdfs.semanticscholar.org/150b/255297479d2d486abebf5cd235526e00357e.pdf\">Prognostic Value and Development of a Scoring System in Horses With Systemic Inflammatory Response Syndrome</a></li>\n<li><a href=\"https://www.huffingtonpost.com/entry/the-pros-and-cons-of-logistic-regression-versus-decision_us_594330ffe4b0d188d027fd1d\">The Pros and Cons of Logistic Regression Versus Decision Trees in Predictive Modeling</a></li>\n<li><a href=\"https://www.edvancer.in/logistic-regression-vs-decision-trees-vs-svm-part1/\">Logistic regression vs Descision Tree</a></li>\n<li><a href=\"https://machinelearning-blog.com/2018/04/23/logistic-regression-101/\">Logistic regression 101</a></li>\n<li><a href=\"https://www.theanalysisfactor.com/why-use-odds-ratios/\">Why use odds ratio in logistic regression</a></li>\n<li><a href=\"https://www.quora.com/What-are-some-problems-with-the-use-of-logistic-regression\">Some problems with using logistic regression</a></li>\n<li><a href=\"https://www.quora.com/Big-Data/What-algorithms-do-data-scientists-actually-use-at-work-What-are-good-resources-to-learn-the-same/answer/Vijay-Krishnan-1?share=1&#x26;srid=37n5\">What algorithms are used at work for Big Data</a></li>\n<li><a href=\"https://machinelearningmastery.com/implement-logistic-regression-stochastic-gradient-descent-scratch-python/\">Implement logistic regression with Stochastic gradient descent</a></li>\n<li><a href=\"https://www.cse.iitk.ac.in/users/purushot/slides/svm-iiita09.pdf\">SVM Tutorial</a></li>\n<li><a href=\"https://data-flair.training/blogs/applications-of-svm/\">Application of SVM</a></li>\n<li><a href=\"http://iopscience.iop.org/article/10.1088/1755-1315/20/1/012038/pdf\">Application of support vector machine for classification of multispectral data</a></li>\n<li><a href=\"https://www.kdnuggets.com/2017/08/support-vector-machines-learning-svms-examples.html\">SVM Tutorial</a></li>\n<li><a href=\"https://www.sciencedirect.com/science/article/pii/S0098300412002269\">SVM in environemtal science</a></li>\n<li><a href=\"https://www.slideshare.net/beniamino/kernel-based-models-for-geo-and-environmental-sciences-alexei-pozdnoukhov-national-centre-for-geocomputation-national-university-of-ireland-maynooth-ireland\">SVM in environmental science</a></li>\n<li><a href=\"https://pure.uniten.edu.my/en/publications/daily-river-flow-forecasting-with-hybrid-support-vector-machine-p\">Daily river flow forecasting with SVM</a></li>\n<li><a href=\"https://www.slideshare.net/beniamino/kernel-based-models-for-geo-and-environmental-sciences-alexei-pozdnoukhov-national-centre-for-geocomputation-national-university-of-ireland-maynooth-ireland\">Kernel methods for geoscience</a></li>\n<li><a href=\"http://aclweb.org/anthology/U12-1016\">Classification of Study Region in Environmental Science</a></li>\n<li><a href=\"https://www.tandfonline.com/doi/pdf/10.5721/EuJRS20154823\">Application of Support Vector Machines for Landuse Classification Using High-Resolution RapidEye Images</a></li>\n<li><a href=\"https://core.ac.uk/download/pdf/6302770.pdf\">Support Vector Machines (SVM) as a Technique for Solvency Analysis</a></li>\n<li><a href=\"https://profs.info.uaic.ro/~ciortuz/SLIDES/svm.pdf\">Introduction to support vector machines</a></li>\n<li><a href=\"http://blog.kaggle.com/2017/01/23/a-kaggle-master-explains-gradient-boosting/\">Kaggle Gradient boosting tutorial</a></li>\n<li><a href=\"http://www.readcube.com/articles/10.3389/fnbot.2013.00021\">Gradient boosting machines a tutorial</a></li>\n<li><a href=\"https://medium.com/@aravanshad/gradient-boosting-versus-random-forest-cfa3fa8f0d80\">Gradient boosting vs random forest</a></li>\n<li><a href=\"https://towardsdatascience.com/understanding-gradient-boosting-machines-9be756fe76ab\">Understanding gradient boosting machines</a></li>\n<li><a href=\"https://www.psiweb.org/docs/default-source/default-document-library/guiyuan-lei-slides.pdf?sfvrsn=2526dedb_0\">Predict survival for cancer patient:  simple model or advanced machine learning?</a></li>\n<li><a href=\"https://www.kdd.org/kdd2016/papers/files/rfp0697-chenAemb.pdf\">XGBoost: A Scalable Tree Boosting System</a></li>\n<li><a href=\"https://thereputationalgorithm.com/2017/01/21/top-predictive-algorithms-infographic/\">Pros and Cons of top predective algorithms</a></li>\n<li><a href=\"https://www.sas.com/content/dam/SAS/support/en/sas-global-forum-proceedings/2018/1857-2018.pdf\">A comparison of Gradient Boosting with Logistic Regression in Practical Cases</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PGITM1E2CLk\">Tree Models and Ensembles: Decision Trees, Boosting, Bagging, Gradient Boosting</a></li>\n<li><a href=\"https://medium.com/mlreview/gradient-boosting-from-scratch-1e317ae4587d\">Gradient Boosting from scratch</a></li>\n<li><a href=\"https://quantdare.com/what-is-the-difference-between-bagging-and-boosting/\">What is the difference between bagging and boosting</a></li>\n<li><a href=\"https://www.encyclopediaofmath.org/index.php/Errors,_theory_of\">theory or errors</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"></code></pre></div>","id":"3d8d9731-0040-5a95-9a01-12325cce16fd","frontmatter":{"title":"Finding Donors","date":"March 02, 2019","tags":["python","machinelearning","math","games"]},"fields":{"slug":"/finding_donors/"}}}]}},"pageContext":{"limit":3,"skip":3,"numPages":2,"currentPage":2}}}