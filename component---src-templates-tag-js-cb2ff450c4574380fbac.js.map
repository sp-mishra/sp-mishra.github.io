{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["Tag","_ref","pageContext","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","console","log","tag","totalCount","tagHeader","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","keywords","className","_components_sidebar_Sidebar__WEBPACK_IMPORTED_MODULE_8__","map","post","tags","node","frontmatter","key","id","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","fields","slug","date","excerpt","techTags","forEach","i","label","push","_components_tags_TechTag__WEBPACK_IMPORTED_MODULE_9__","tech","name","size","color","getTechTags","propTypes","PropTypes","shape","string","isRequired","number","arrayOf","pageQuery","dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e"],"mappings":"kPAWMA,EAAM,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KACpBC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAASJ,EAAKK,KAAKC,aAAaF,OACtCG,QAAQC,IAAIT,EAAYU,KAHa,IAI7BA,EAAQV,EAARU,IACAC,EAAeV,EAAKE,kBAApBQ,WACFC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEED,EAFF,IAiBf,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,OAAOC,SAAU,wEAC5BN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBACbP,EAAAC,EAAAC,cAACM,EAAA,EAAD,OAGFR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBACbP,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,WAAWR,IAC3BV,EAAMoB,IAAI,SAACC,GACV,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,OACEX,EAAAC,EAAAC,cAAA,OAAKY,IAAKJ,EAAKE,KAAKG,GAAIR,UAAU,kBAChCP,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,GAAIP,EAAKE,KAAKM,OAAOC,KACrBZ,UAAU,aAEVP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,WAAWG,EAAKE,KAAKC,YAAYR,QAEjDL,EAAAC,EAAAC,cAAA,SAAOK,UAAU,qBAAjB,aAAgDG,EAAKE,KAAKC,YAAYO,MAEtEpB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,iBAAiBG,EAAKE,KAAKS,SACxCrB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,GAAIP,EAAKE,KAAKM,OAAOC,KACrBZ,UAAU,gBAEVP,EAAAC,EAAAC,cAAA,SAAOK,UAAU,uBAAjB,oBAEFP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WA1CT,SAACI,GACnB,IAAMW,EAAW,GASjB,OARAX,EAAKY,QAAQ,SAAC1B,EAAK2B,GACjBhC,EAAO+B,QAAQ,SAACE,GACV5B,IAAQ4B,EAAM5B,KAChByB,EAASI,KAAK1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAASb,IAAKU,EAAG3B,IAAK4B,EAAM5B,IAAK+B,KAAMH,EAAMG,KAAMC,KAAMJ,EAAMI,KAAMC,KAAML,EAAMK,KACxEC,MAAON,EAAMM,aAInCT,EAiCQU,CAAYrB,WAW/B1B,EAAIgD,UAAY,CACd9C,YAAa+C,IAAUC,MAAM,CAC3BtC,IAAKqC,IAAUE,OAAOC,aAExBjD,KAAM8C,IAAUC,MAAM,CACpB7C,kBAAmB4C,IAAUC,MAAM,CACjCrC,WAAYoC,IAAUI,OAAOD,WAC7B9C,MAAO2C,IAAUK,QACfL,IAAUC,MAAM,CACdvB,KAAMsB,IAAUC,MAAM,CACpBtB,YAAaqB,IAAUC,MAAM,CAC3B9B,MAAO6B,IAAUE,OAAOC,iBAG3BA,iBAMJ,IAAMG,EAAS,aAwCPvD,iCCvIf,IAAAwD,EAASC,EAAQ,IAAcC,EAC/BC,EAAAC,SAAAC,UACAC,EAAA,wBACA,SAGAH,GAAkBF,EAAQ,KAAgBD,EAAAG,EAH1C,OAG0C,CAC1CI,cAAA,EACAC,IAAA,WACA,IACA,UAAAC,MAAAC,MAAAJ,GAAA,GACK,MAAAK,GACL","file":"component---src-templates-tag-js-cb2ff450c4574380fbac.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst Tag = ({ pageContext, data }) => {\n  const posts = data.allMarkdownRemark.edges\n  const labels = data.site.siteMetadata.labels\n  console.log(pageContext.tag)\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  const getTechTags = (tags) => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size}\n                                 color={label.color}/>)\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" keywords={[`gatsby`, `javascript`, `react`, `web development`, `node.js`, `graphql`]}/>\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar/>\n        </div>\n\n        <div className=\"post-list-main\">\n          <i><h2 className=\"heading\">{tagHeader}</h2></i>\n          {posts.map((post) => {\n            const tags = post.node.frontmatter.tags\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link\n                  to={post.node.fields.slug}\n                  className=\"text-dark\"\n                >\n                  <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">Posted on {post.node.frontmatter.date}\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link\n                  to={post.node.fields.slug}\n                  className=\"text-primary\"\n                >\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">\n                  {getTechTags(tags)}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }),\n}\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        site {\n            siteMetadata {\n                title\n                author\n                labels {\n                    tag\n                    tech\n                    name\n                    size\n                    color\n                }\n            }\n        }\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { tags: { in: [$tag] } } }\n        ) {\n            totalCount\n            edges {\n                node {\n                    excerpt(pruneLength: 200)\n                    html\n                    id\n                    frontmatter {\n                        title\n                        date(formatString: \"MMMM, YYYY\")\n                        tags\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default Tag","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}